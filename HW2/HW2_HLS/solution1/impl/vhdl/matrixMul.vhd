-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixMul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lm : IN STD_LOGIC_VECTOR (31 downto 0);
    ln : IN STD_LOGIC_VECTOR (31 downto 0);
    lp : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    c_ce0 : OUT STD_LOGIC;
    c_we0 : OUT STD_LOGIC;
    c_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixMul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixMul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=595,HLS_SYN_LUT=719,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_80 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_234_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_511 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_cast_fu_244_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_cast_reg_516 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_261_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_1_reg_524 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_cast_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_cast_reg_529 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_290_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_542 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_16_cast2_fu_306_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_cast2_reg_547 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_cast_fu_318_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_cast_reg_552 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_2_fu_335_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_2_reg_560 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_359_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_377_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_578 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_22_cast_fu_387_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_cast_reg_583 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_404_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_3_reg_592 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_18_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_597 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_addr_reg_602 : STD_LOGIC_VECTOR (13 downto 0);
    signal n_1_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal n_1_reg_610 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_13_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal b_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_load_reg_630 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_481_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal a_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal a_ce0 : STD_LOGIC;
    signal a_we0 : STD_LOGIC;
    signal b_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_ce0 : STD_LOGIC;
    signal b_we0 : STD_LOGIC;
    signal i_reg_135 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_reg_146 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i1_reg_157 : STD_LOGIC_VECTOR (30 downto 0);
    signal j2_reg_168 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i3_reg_179 : STD_LOGIC_VECTOR (30 downto 0);
    signal j4_reg_190 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_214 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_cast_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_267_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_9_fu_271_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i1_cast_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_300_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j2_cast_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_345_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_14_fu_349_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_10_fu_341_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i3_cast_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_383_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j4_cast_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_443_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_453_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_cast_fu_457_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_481_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_481_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_481_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixMul_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixMul_a IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    a_U : component matrixMul_a
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_address0,
        ce0 => a_ce0,
        we0 => a_we0,
        d0 => in_r_q0,
        q0 => a_q0);

    b_U : component matrixMul_a
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_address0,
        ce0 => b_ce0,
        we0 => b_we0,
        d0 => in_r_q0,
        q0 => b_q0);

    matrixMul_mac_mulbkb_U1 : component matrixMul_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_481_p0,
        din1 => grp_fu_481_p1,
        din2 => sum_reg_201,
        dout => grp_fu_481_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_reg_157 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_s_fu_330_p2 = ap_const_lv1_0))) then 
                i1_reg_157 <= i_2_reg_542;
            end if; 
        end if;
    end process;

    i3_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i3_reg_179 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_11_fu_399_p2 = ap_const_lv1_0))) then 
                i3_reg_179 <= i_3_reg_578;
            end if; 
        end if;
    end process;

    i_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_135 <= i_1_reg_511;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_135 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j2_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j2_reg_168 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j2_reg_168 <= j_2_reg_560;
            end if; 
        end if;
    end process;

    j4_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j4_reg_190 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_13_fu_428_p2 = ap_const_lv1_0))) then 
                j4_reg_190 <= j_3_reg_592;
            end if; 
        end if;
    end process;

    j_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_146 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_146 <= j_1_reg_524;
            end if; 
        end if;
    end process;

    n_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                n_reg_214 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                n_reg_214 <= n_1_reg_610;
            end if; 
        end if;
    end process;

    sum_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                sum_reg_201 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                sum_reg_201 <= grp_fu_481_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                a_load_reg_625 <= a_q0;
                b_load_reg_630 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_11_fu_399_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                c_addr_reg_602 <= tmp_23_cast_fu_419_p1(14 - 1 downto 0);
                tmp_18_reg_597 <= tmp_18_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_511 <= i_1_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_542 <= i_2_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3_reg_578 <= i_3_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_524 <= j_1_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_560 <= j_2_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_3_reg_592 <= j_3_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                n_1_reg_610 <= n_1_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_16_cast2_reg_547(16 downto 7) <= tmp_16_cast2_fu_306_p3(16 downto 7);
                    tmp_18_cast_reg_552(15 downto 7) <= tmp_18_cast_fu_318_p3(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_330_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_16_reg_570 <= tmp_16_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_22_cast_reg_583(15 downto 7) <= tmp_22_cast_fu_387_p3(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_8_cast_reg_516(16 downto 7) <= tmp_8_cast_fu_244_p3(16 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_9_cast_reg_529(16 downto 0) <= tmp_9_cast_fu_276_p1(16 downto 0);
            end if;
        end if;
    end process;
    tmp_8_cast_reg_516(6 downto 0) <= "0000000";
    tmp_9_cast_reg_529(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    tmp_16_cast2_reg_547(6 downto 0) <= "0000000";
    tmp_18_cast_reg_552(6 downto 0) <= "0000000";
    tmp_22_cast_reg_583(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_229_p2, ap_CS_fsm_state3, tmp_2_fu_256_p2, ap_CS_fsm_state5, tmp_3_fu_285_p2, ap_CS_fsm_state6, tmp_s_fu_330_p2, ap_CS_fsm_state8, tmp_5_fu_372_p2, ap_CS_fsm_state9, tmp_11_fu_399_p2, ap_CS_fsm_state10, tmp_13_fu_428_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_2_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((tmp_3_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_s_fu_330_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_5_fu_372_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_11_fu_399_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_13_fu_428_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(tmp_9_cast_reg_529, ap_CS_fsm_state10, ap_CS_fsm_state4, tmp_24_cast_fu_448_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            a_address0 <= tmp_24_cast_fu_448_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_address0 <= tmp_9_cast_reg_529(14 - 1 downto 0);
        else 
            a_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_we0 <= ap_const_logic_1;
        else 
            a_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, tmp_5_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_5_fu_372_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, tmp_5_fu_372_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_5_fu_372_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state7, tmp_20_cast_fu_364_p1, tmp_27_cast_fu_470_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            b_address0 <= tmp_27_cast_fu_470_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_address0 <= tmp_20_cast_fu_364_p1(14 - 1 downto 0);
        else 
            b_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_we0 <= ap_const_logic_1;
        else 
            b_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_address0 <= c_addr_reg_602;

    c_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            c_ce0 <= ap_const_logic_1;
        else 
            c_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_d0 <= sum_reg_201;

    c_we0_assign_proc : process(ap_CS_fsm_state10, tmp_13_fu_428_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_13_fu_428_p2 = ap_const_lv1_0))) then 
            c_we0 <= ap_const_logic_1;
        else 
            c_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_481_p0 <= grp_fu_481_p00(8 - 1 downto 0);
    grp_fu_481_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_load_reg_630),16));
    grp_fu_481_p1 <= grp_fu_481_p10(8 - 1 downto 0);
    grp_fu_481_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_load_reg_625),16));
    i1_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_157),32));
    i3_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_reg_179),32));
    i_1_fu_234_p2 <= std_logic_vector(unsigned(i_reg_135) + unsigned(ap_const_lv31_1));
    i_2_fu_290_p2 <= std_logic_vector(unsigned(i1_reg_157) + unsigned(ap_const_lv31_1));
    i_3_fu_377_p2 <= std_logic_vector(unsigned(i3_reg_179) + unsigned(ap_const_lv31_1));
    i_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_135),32));

    in_r_address0_assign_proc : process(ap_CS_fsm_state3, tmp_9_cast_fu_276_p1, ap_CS_fsm_state6, tmp_19_cast_fu_354_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            in_r_address0 <= tmp_19_cast_fu_354_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_r_address0 <= tmp_9_cast_fu_276_p1(15 - 1 downto 0);
        else 
            in_r_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    in_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j2_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_168),32));
    j4_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_190),32));
    j_1_fu_261_p2 <= std_logic_vector(unsigned(j_reg_146) + unsigned(ap_const_lv31_1));
    j_2_fu_335_p2 <= std_logic_vector(unsigned(j2_reg_168) + unsigned(ap_const_lv31_1));
    j_3_fu_404_p2 <= std_logic_vector(unsigned(j4_reg_190) + unsigned(ap_const_lv31_1));
    j_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_146),32));
    n_1_fu_433_p2 <= std_logic_vector(unsigned(n_reg_214) + unsigned(ap_const_lv31_1));
    n_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_214),32));
    tmp_10_fu_341_p1 <= j2_reg_168(16 - 1 downto 0);
    tmp_11_fu_399_p2 <= "1" when (signed(j4_cast_fu_395_p1) < signed(lp)) else "0";
    tmp_12_fu_345_p1 <= j2_reg_168(17 - 1 downto 0);
    tmp_13_fu_428_p2 <= "1" when (signed(n_cast_fu_424_p1) < signed(ln)) else "0";
    tmp_14_fu_349_p2 <= std_logic_vector(unsigned(tmp_16_cast2_reg_547) + unsigned(tmp_12_fu_345_p1));
    tmp_16_cast2_fu_306_p3 <= (tmp_7_fu_300_p2 & ap_const_lv7_0);
    tmp_16_fu_359_p2 <= std_logic_vector(unsigned(tmp_18_cast_reg_552) + unsigned(tmp_10_fu_341_p1));
    tmp_17_fu_383_p1 <= i3_reg_179(9 - 1 downto 0);
    tmp_18_cast_fu_318_p3 <= (tmp_8_fu_314_p1 & ap_const_lv7_0);
    tmp_18_fu_410_p1 <= j4_reg_190(16 - 1 downto 0);
        tmp_19_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_349_p2),64));

    tmp_19_fu_414_p2 <= std_logic_vector(unsigned(tmp_22_cast_reg_583) + unsigned(tmp_18_fu_410_p1));
    tmp_1_fu_240_p1 <= i_reg_135(10 - 1 downto 0);
    tmp_20_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_570),64));
    tmp_20_fu_439_p1 <= n_reg_214(16 - 1 downto 0);
    tmp_21_fu_443_p2 <= std_logic_vector(unsigned(tmp_22_cast_reg_583) + unsigned(tmp_20_fu_439_p1));
    tmp_22_cast_fu_387_p3 <= (tmp_17_fu_383_p1 & ap_const_lv7_0);
    tmp_22_fu_453_p1 <= n_reg_214(9 - 1 downto 0);
    tmp_23_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_414_p2),64));
    tmp_23_fu_465_p2 <= std_logic_vector(unsigned(tmp_26_cast_fu_457_p3) + unsigned(tmp_18_reg_597));
    tmp_24_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_443_p2),64));
    tmp_26_cast_fu_457_p3 <= (tmp_22_fu_453_p1 & ap_const_lv7_0);
    tmp_27_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_465_p2),64));
    tmp_2_fu_256_p2 <= "1" when (signed(j_cast_fu_252_p1) < signed(ln)) else "0";
    tmp_3_fu_285_p2 <= "1" when (signed(i1_cast_fu_281_p1) < signed(ln)) else "0";
    tmp_4_fu_267_p1 <= j_reg_146(17 - 1 downto 0);
    tmp_5_fu_372_p2 <= "1" when (signed(i3_cast_fu_368_p1) < signed(lm)) else "0";
    tmp_6_fu_296_p1 <= i1_reg_157(10 - 1 downto 0);
    tmp_7_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv10_80) + unsigned(tmp_6_fu_296_p1));
    tmp_8_cast_fu_244_p3 <= (tmp_1_fu_240_p1 & ap_const_lv7_0);
    tmp_8_fu_314_p1 <= i1_reg_157(9 - 1 downto 0);
    tmp_9_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_271_p2),64));
    tmp_9_fu_271_p2 <= std_logic_vector(unsigned(tmp_8_cast_reg_516) + unsigned(tmp_4_fu_267_p1));
    tmp_fu_229_p2 <= "1" when (signed(i_cast_fu_225_p1) < signed(lm)) else "0";
    tmp_s_fu_330_p2 <= "1" when (signed(j2_cast_fu_326_p1) < signed(lp)) else "0";
end behav;
