// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mul_Matrix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mul_Matrix::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mul_Matrix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> mul_Matrix::ap_ST_fsm_state1 = "1";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state2 = "10";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state3 = "100";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state4 = "1000";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state5 = "10000";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state6 = "100000";
const sc_lv<7> mul_Matrix::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> mul_Matrix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> mul_Matrix::ap_const_lv1_0 = "0";
const sc_lv<1> mul_Matrix::ap_const_lv1_1 = "1";
const sc_lv<2> mul_Matrix::ap_const_lv2_0 = "00";
const sc_lv<2> mul_Matrix::ap_const_lv2_2 = "10";
const sc_lv<2> mul_Matrix::ap_const_lv2_3 = "11";
const sc_lv<2> mul_Matrix::ap_const_lv2_1 = "1";
const sc_lv<32> mul_Matrix::ap_const_lv32_5 = "101";
const sc_lv<32> mul_Matrix::ap_const_lv32_4 = "100";
const sc_lv<32> mul_Matrix::ap_const_lv32_6 = "110";
const int mul_Matrix::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> mul_Matrix::ap_const_lv32_1 = "1";
const sc_lv<32> mul_Matrix::ap_const_lv32_2 = "10";
const sc_lv<32> mul_Matrix::ap_const_lv32_3 = "11";
const bool mul_Matrix::ap_const_boolean_0 = false;
const sc_lv<31> mul_Matrix::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> mul_Matrix::ap_const_lv31_1 = "1";
const bool mul_Matrix::ap_const_boolean_1 = true;

mul_Matrix::mul_Matrix(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mul_Matrix_AXILiteS_s_axi_U = new mul_Matrix_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("mul_Matrix_AXILiteS_s_axi_U");
    mul_Matrix_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    mul_Matrix_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    mul_Matrix_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    mul_Matrix_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    mul_Matrix_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    mul_Matrix_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    mul_Matrix_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    mul_Matrix_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    mul_Matrix_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    mul_Matrix_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    mul_Matrix_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    mul_Matrix_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    mul_Matrix_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    mul_Matrix_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    mul_Matrix_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    mul_Matrix_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    mul_Matrix_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    mul_Matrix_AXILiteS_s_axi_U->ACLK(ap_clk);
    mul_Matrix_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    mul_Matrix_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    mul_Matrix_AXILiteS_s_axi_U->useLM(useLM);
    mul_Matrix_AXILiteS_s_axi_U->useLN(useLN);
    mul_Matrix_AXILiteS_s_axi_U->useLP(useLP);
    mul_Matrix_mac_mubkb_U1 = new mul_Matrix_mac_mubkb<1,1,8,8,32,32>("mul_Matrix_mac_mubkb_U1");
    mul_Matrix_mac_mubkb_U1->din0(grp_fu_169_p0);
    mul_Matrix_mac_mubkb_U1->din1(grp_fu_169_p1);
    mul_Matrix_mac_mubkb_U1->din2(sum_reg_95);
    mul_Matrix_mac_mubkb_U1->dout(grp_fu_169_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( tmp_4_fu_150_p2 );

    SC_METHOD(thread_ap_block_state6);
    sensitive << ( arrayA_0_vld_out );
    sensitive << ( arrayB_0_vld_out );

    SC_METHOD(thread_ap_done);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_124_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_124_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_arrayA_0_ack_in);
    sensitive << ( arrayA_0_state );

    SC_METHOD(thread_arrayA_0_ack_out);
    sensitive << ( arrayA_0_vld_out );
    sensitive << ( arrayB_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arrayA_0_data_out);
    sensitive << ( arrayA_0_payload_A );
    sensitive << ( arrayA_0_payload_B );
    sensitive << ( arrayA_0_sel );

    SC_METHOD(thread_arrayA_0_load_A);
    sensitive << ( arrayA_0_sel_wr );
    sensitive << ( arrayA_0_state_cmp_full );

    SC_METHOD(thread_arrayA_0_load_B);
    sensitive << ( arrayA_0_sel_wr );
    sensitive << ( arrayA_0_state_cmp_full );

    SC_METHOD(thread_arrayA_0_sel);
    sensitive << ( arrayA_0_sel_rd );

    SC_METHOD(thread_arrayA_0_state_cmp_full);
    sensitive << ( arrayA_0_state );

    SC_METHOD(thread_arrayA_0_vld_in);
    sensitive << ( arrayA_TVALID );

    SC_METHOD(thread_arrayA_0_vld_out);
    sensitive << ( arrayA_0_state );

    SC_METHOD(thread_arrayA_TDATA_blk_n);
    sensitive << ( arrayA_0_state );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arrayA_TREADY);
    sensitive << ( arrayA_0_state );

    SC_METHOD(thread_arrayB_0_ack_in);
    sensitive << ( arrayB_0_state );

    SC_METHOD(thread_arrayB_0_ack_out);
    sensitive << ( arrayA_0_vld_out );
    sensitive << ( arrayB_0_vld_out );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arrayB_0_data_out);
    sensitive << ( arrayB_0_payload_A );
    sensitive << ( arrayB_0_payload_B );
    sensitive << ( arrayB_0_sel );

    SC_METHOD(thread_arrayB_0_load_A);
    sensitive << ( arrayB_0_sel_wr );
    sensitive << ( arrayB_0_state_cmp_full );

    SC_METHOD(thread_arrayB_0_load_B);
    sensitive << ( arrayB_0_sel_wr );
    sensitive << ( arrayB_0_state_cmp_full );

    SC_METHOD(thread_arrayB_0_sel);
    sensitive << ( arrayB_0_sel_rd );

    SC_METHOD(thread_arrayB_0_state_cmp_full);
    sensitive << ( arrayB_0_state );

    SC_METHOD(thread_arrayB_0_vld_in);
    sensitive << ( arrayB_TVALID );

    SC_METHOD(thread_arrayB_0_vld_out);
    sensitive << ( arrayB_0_state );

    SC_METHOD(thread_arrayB_TDATA_blk_n);
    sensitive << ( arrayB_0_state );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_arrayB_TREADY);
    sensitive << ( arrayB_0_state );

    SC_METHOD(thread_arrayR_1_ack_in);
    sensitive << ( arrayR_1_state );

    SC_METHOD(thread_arrayR_1_ack_out);
    sensitive << ( arrayR_TREADY );

    SC_METHOD(thread_arrayR_1_data_out);
    sensitive << ( arrayR_1_payload_A );
    sensitive << ( arrayR_1_payload_B );
    sensitive << ( arrayR_1_sel );

    SC_METHOD(thread_arrayR_1_load_A);
    sensitive << ( arrayR_1_sel_wr );
    sensitive << ( arrayR_1_state_cmp_full );

    SC_METHOD(thread_arrayR_1_load_B);
    sensitive << ( arrayR_1_sel_wr );
    sensitive << ( arrayR_1_state_cmp_full );

    SC_METHOD(thread_arrayR_1_sel);
    sensitive << ( arrayR_1_sel_rd );

    SC_METHOD(thread_arrayR_1_state_cmp_full);
    sensitive << ( arrayR_1_state );

    SC_METHOD(thread_arrayR_1_vld_in);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_4_fu_150_p2 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_arrayR_1_vld_out);
    sensitive << ( arrayR_1_state );

    SC_METHOD(thread_arrayR_TDATA);
    sensitive << ( arrayR_1_data_out );

    SC_METHOD(thread_arrayR_TDATA_blk_n);
    sensitive << ( arrayR_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_4_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_arrayR_TVALID);
    sensitive << ( arrayR_1_state );

    SC_METHOD(thread_c_1_fu_140_p2);
    sensitive << ( c_reg_84 );

    SC_METHOD(thread_exitcond_fu_135_p2);
    sensitive << ( useLN_read_reg_177 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( c_reg_84 );

    SC_METHOD(thread_grp_fu_169_p0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_169_p00 );

    SC_METHOD(thread_grp_fu_169_p00);
    sensitive << ( arrayA_0_data_out );

    SC_METHOD(thread_grp_fu_169_p1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_fu_169_p10 );

    SC_METHOD(thread_grp_fu_169_p10);
    sensitive << ( arrayB_0_data_out );

    SC_METHOD(thread_k_1_fu_155_p2);
    sensitive << ( k_reg_109 );

    SC_METHOD(thread_k_cast_fu_146_p1);
    sensitive << ( k_reg_109 );

    SC_METHOD(thread_r_1_fu_129_p2);
    sensitive << ( r_reg_73 );

    SC_METHOD(thread_r_cast_fu_120_p1);
    sensitive << ( r_reg_73 );

    SC_METHOD(thread_tmp_4_fu_150_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( useLM_read_reg_183 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( k_cast_fu_146_p1 );

    SC_METHOD(thread_tmp_fu_124_p2);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( useLN_read_reg_177 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_cast_fu_120_p1 );

    SC_METHOD(thread_useLM_0_ack_out);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_124_p2 );

    SC_METHOD(thread_useLN_0_ack_out);
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_124_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arrayA_0_vld_out );
    sensitive << ( arrayB_0_vld_out );
    sensitive << ( arrayR_1_ack_in );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_4_fu_150_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state5_io );
    sensitive << ( exitcond_fu_135_p2 );
    sensitive << ( tmp_fu_124_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    useLM_0_data_reg = "00000000000000000000000000000000";
    useLM_0_vld_reg = SC_LOGIC_0;
    useLN_0_data_reg = "00000000000000000000000000000000";
    useLN_0_vld_reg = SC_LOGIC_0;
    arrayA_0_sel_rd = SC_LOGIC_0;
    arrayA_0_sel_wr = SC_LOGIC_0;
    arrayA_0_state = "00";
    arrayB_0_sel_rd = SC_LOGIC_0;
    arrayB_0_sel_wr = SC_LOGIC_0;
    arrayB_0_state = "00";
    arrayR_1_sel_rd = SC_LOGIC_0;
    arrayR_1_sel_wr = SC_LOGIC_0;
    arrayR_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mul_Matrix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, arrayA_TDATA, "(port)arrayA_TDATA");
    sc_trace(mVcdFile, arrayA_TVALID, "(port)arrayA_TVALID");
    sc_trace(mVcdFile, arrayA_TREADY, "(port)arrayA_TREADY");
    sc_trace(mVcdFile, arrayB_TDATA, "(port)arrayB_TDATA");
    sc_trace(mVcdFile, arrayB_TVALID, "(port)arrayB_TVALID");
    sc_trace(mVcdFile, arrayB_TREADY, "(port)arrayB_TREADY");
    sc_trace(mVcdFile, arrayR_TDATA, "(port)arrayR_TDATA");
    sc_trace(mVcdFile, arrayR_TVALID, "(port)arrayR_TVALID");
    sc_trace(mVcdFile, arrayR_TREADY, "(port)arrayR_TREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, useLM, "useLM");
    sc_trace(mVcdFile, useLM_0_data_reg, "useLM_0_data_reg");
    sc_trace(mVcdFile, useLM_0_vld_reg, "useLM_0_vld_reg");
    sc_trace(mVcdFile, useLM_0_ack_out, "useLM_0_ack_out");
    sc_trace(mVcdFile, useLN, "useLN");
    sc_trace(mVcdFile, useLN_0_data_reg, "useLN_0_data_reg");
    sc_trace(mVcdFile, useLN_0_vld_reg, "useLN_0_vld_reg");
    sc_trace(mVcdFile, useLN_0_ack_out, "useLN_0_ack_out");
    sc_trace(mVcdFile, useLP, "useLP");
    sc_trace(mVcdFile, arrayA_0_data_out, "arrayA_0_data_out");
    sc_trace(mVcdFile, arrayA_0_vld_in, "arrayA_0_vld_in");
    sc_trace(mVcdFile, arrayA_0_vld_out, "arrayA_0_vld_out");
    sc_trace(mVcdFile, arrayA_0_ack_in, "arrayA_0_ack_in");
    sc_trace(mVcdFile, arrayA_0_ack_out, "arrayA_0_ack_out");
    sc_trace(mVcdFile, arrayA_0_payload_A, "arrayA_0_payload_A");
    sc_trace(mVcdFile, arrayA_0_payload_B, "arrayA_0_payload_B");
    sc_trace(mVcdFile, arrayA_0_sel_rd, "arrayA_0_sel_rd");
    sc_trace(mVcdFile, arrayA_0_sel_wr, "arrayA_0_sel_wr");
    sc_trace(mVcdFile, arrayA_0_sel, "arrayA_0_sel");
    sc_trace(mVcdFile, arrayA_0_load_A, "arrayA_0_load_A");
    sc_trace(mVcdFile, arrayA_0_load_B, "arrayA_0_load_B");
    sc_trace(mVcdFile, arrayA_0_state, "arrayA_0_state");
    sc_trace(mVcdFile, arrayA_0_state_cmp_full, "arrayA_0_state_cmp_full");
    sc_trace(mVcdFile, arrayB_0_data_out, "arrayB_0_data_out");
    sc_trace(mVcdFile, arrayB_0_vld_in, "arrayB_0_vld_in");
    sc_trace(mVcdFile, arrayB_0_vld_out, "arrayB_0_vld_out");
    sc_trace(mVcdFile, arrayB_0_ack_in, "arrayB_0_ack_in");
    sc_trace(mVcdFile, arrayB_0_ack_out, "arrayB_0_ack_out");
    sc_trace(mVcdFile, arrayB_0_payload_A, "arrayB_0_payload_A");
    sc_trace(mVcdFile, arrayB_0_payload_B, "arrayB_0_payload_B");
    sc_trace(mVcdFile, arrayB_0_sel_rd, "arrayB_0_sel_rd");
    sc_trace(mVcdFile, arrayB_0_sel_wr, "arrayB_0_sel_wr");
    sc_trace(mVcdFile, arrayB_0_sel, "arrayB_0_sel");
    sc_trace(mVcdFile, arrayB_0_load_A, "arrayB_0_load_A");
    sc_trace(mVcdFile, arrayB_0_load_B, "arrayB_0_load_B");
    sc_trace(mVcdFile, arrayB_0_state, "arrayB_0_state");
    sc_trace(mVcdFile, arrayB_0_state_cmp_full, "arrayB_0_state_cmp_full");
    sc_trace(mVcdFile, arrayR_1_data_out, "arrayR_1_data_out");
    sc_trace(mVcdFile, arrayR_1_vld_in, "arrayR_1_vld_in");
    sc_trace(mVcdFile, arrayR_1_vld_out, "arrayR_1_vld_out");
    sc_trace(mVcdFile, arrayR_1_ack_in, "arrayR_1_ack_in");
    sc_trace(mVcdFile, arrayR_1_ack_out, "arrayR_1_ack_out");
    sc_trace(mVcdFile, arrayR_1_payload_A, "arrayR_1_payload_A");
    sc_trace(mVcdFile, arrayR_1_payload_B, "arrayR_1_payload_B");
    sc_trace(mVcdFile, arrayR_1_sel_rd, "arrayR_1_sel_rd");
    sc_trace(mVcdFile, arrayR_1_sel_wr, "arrayR_1_sel_wr");
    sc_trace(mVcdFile, arrayR_1_sel, "arrayR_1_sel");
    sc_trace(mVcdFile, arrayR_1_load_A, "arrayR_1_load_A");
    sc_trace(mVcdFile, arrayR_1_load_B, "arrayR_1_load_B");
    sc_trace(mVcdFile, arrayR_1_state, "arrayR_1_state");
    sc_trace(mVcdFile, arrayR_1_state_cmp_full, "arrayR_1_state_cmp_full");
    sc_trace(mVcdFile, arrayA_TDATA_blk_n, "arrayA_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, arrayB_TDATA_blk_n, "arrayB_TDATA_blk_n");
    sc_trace(mVcdFile, arrayR_TDATA_blk_n, "arrayR_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_4_fu_150_p2, "tmp_4_fu_150_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, useLN_read_reg_177, "useLN_read_reg_177");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, useLM_read_reg_183, "useLM_read_reg_183");
    sc_trace(mVcdFile, r_1_fu_129_p2, "r_1_fu_129_p2");
    sc_trace(mVcdFile, r_1_reg_191, "r_1_reg_191");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, c_1_fu_140_p2, "c_1_fu_140_p2");
    sc_trace(mVcdFile, c_1_reg_199, "c_1_reg_199");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, k_1_fu_155_p2, "k_1_fu_155_p2");
    sc_trace(mVcdFile, k_1_reg_207, "k_1_reg_207");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, grp_fu_169_p3, "grp_fu_169_p3");
    sc_trace(mVcdFile, ap_block_state6, "ap_block_state6");
    sc_trace(mVcdFile, r_reg_73, "r_reg_73");
    sc_trace(mVcdFile, exitcond_fu_135_p2, "exitcond_fu_135_p2");
    sc_trace(mVcdFile, c_reg_84, "c_reg_84");
    sc_trace(mVcdFile, tmp_fu_124_p2, "tmp_fu_124_p2");
    sc_trace(mVcdFile, sum_reg_95, "sum_reg_95");
    sc_trace(mVcdFile, k_reg_109, "k_reg_109");
    sc_trace(mVcdFile, r_cast_fu_120_p1, "r_cast_fu_120_p1");
    sc_trace(mVcdFile, k_cast_fu_146_p1, "k_cast_fu_146_p1");
    sc_trace(mVcdFile, grp_fu_169_p0, "grp_fu_169_p0");
    sc_trace(mVcdFile, grp_fu_169_p1, "grp_fu_169_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_169_p00, "grp_fu_169_p00");
    sc_trace(mVcdFile, grp_fu_169_p10, "grp_fu_169_p10");
#endif

    }
    mHdltvinHandle.open("mul_Matrix.hdltvin.dat");
    mHdltvoutHandle.open("mul_Matrix.hdltvout.dat");
}

mul_Matrix::~mul_Matrix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mul_Matrix_AXILiteS_s_axi_U;
    delete mul_Matrix_mac_mubkb_U1;
}

void mul_Matrix::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mul_Matrix::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayA_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_vld_out.read()))) {
            arrayA_0_sel_rd =  (sc_logic) (~arrayA_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayA_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_ack_in.read()))) {
            arrayA_0_sel_wr =  (sc_logic) (~arrayA_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayA_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_ack_out.read()) && 
              esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_vld_in.read()) && 
              esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_2)))) {
            arrayA_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_1)))) {
            arrayA_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(arrayA_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, arrayA_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_ack_out.read()))))) {
            arrayA_0_state = ap_const_lv2_3;
        } else {
            arrayA_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayB_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_vld_out.read()))) {
            arrayB_0_sel_rd =  (sc_logic) (~arrayB_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayB_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_ack_in.read()))) {
            arrayB_0_sel_wr =  (sc_logic) (~arrayB_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayB_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, arrayB_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, arrayB_0_state.read())))) {
            arrayB_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, arrayB_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, arrayB_0_state.read())))) {
            arrayB_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, arrayB_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, arrayB_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, arrayB_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, arrayB_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_ack_out.read()))))) {
            arrayB_0_state = ap_const_lv2_3;
        } else {
            arrayB_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayR_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_vld_out.read()))) {
            arrayR_1_sel_rd =  (sc_logic) (~arrayR_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayR_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_ack_in.read()))) {
            arrayR_1_sel_wr =  (sc_logic) (~arrayR_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        arrayR_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, arrayR_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, arrayR_1_state.read())))) {
            arrayR_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, arrayR_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, arrayR_1_state.read())))) {
            arrayR_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, arrayR_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, arrayR_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, arrayR_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_ack_out.read()))))) {
            arrayR_1_state = ap_const_lv2_3;
        } else {
            arrayR_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1)) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
             esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_1))) {
            c_reg_84 = ap_const_lv32_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            c_reg_84 = c_1_reg_199.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0))) {
        k_reg_109 = ap_const_lv31_0;
    } else if ((!(esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        k_reg_109 = k_1_reg_207.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_1))) {
        r_reg_73 = r_1_reg_191.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        r_reg_73 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_0))) {
        sum_reg_95 = ap_const_lv32_0;
    } else if ((!(esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        sum_reg_95 = grp_fu_169_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_load_A.read())) {
        arrayA_0_payload_A = arrayA_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_load_B.read())) {
        arrayA_0_payload_B = arrayA_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_load_A.read())) {
        arrayB_0_payload_A = arrayB_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_load_B.read())) {
        arrayB_0_payload_B = arrayB_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_load_A.read())) {
        arrayR_1_payload_A = sum_reg_95.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_load_B.read())) {
        arrayR_1_payload_B = sum_reg_95.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_1_reg_199 = c_1_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()))) {
        k_1_reg_207 = k_1_fu_155_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1))) {
        r_1_reg_191 = r_1_fu_129_p2.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, useLM_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, useLM_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, useLM_0_ack_out.read())))) {
        useLM_0_data_reg = useLM.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        useLM_read_reg_183 = useLM_0_data_reg.read();
        useLN_read_reg_177 = useLN_0_data_reg.read();
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, useLN_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_logic_1, useLN_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, useLN_0_ack_out.read())))) {
        useLN_0_data_reg = useLN.read();
    }
}

void mul_Matrix::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mul_Matrix::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void mul_Matrix::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void mul_Matrix::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void mul_Matrix::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void mul_Matrix::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void mul_Matrix::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void mul_Matrix::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(tmp_4_fu_150_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, arrayR_1_ack_in.read()));
}

void mul_Matrix::thread_ap_block_state6() {
    ap_block_state6 = (esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0));
}

void mul_Matrix::thread_ap_done() {
    if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void mul_Matrix::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mul_Matrix::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mul_Matrix::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mul_Matrix::thread_arrayA_0_ack_in() {
    arrayA_0_ack_in = arrayA_0_state.read()[1];
}

void mul_Matrix::thread_arrayA_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        arrayA_0_ack_out = ap_const_logic_1;
    } else {
        arrayA_0_ack_out = ap_const_logic_0;
    }
}

void mul_Matrix::thread_arrayA_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayA_0_sel.read())) {
        arrayA_0_data_out = arrayA_0_payload_B.read();
    } else {
        arrayA_0_data_out = arrayA_0_payload_A.read();
    }
}

void mul_Matrix::thread_arrayA_0_load_A() {
    arrayA_0_load_A = (arrayA_0_state_cmp_full.read() & ~arrayA_0_sel_wr.read());
}

void mul_Matrix::thread_arrayA_0_load_B() {
    arrayA_0_load_B = (arrayA_0_sel_wr.read() & arrayA_0_state_cmp_full.read());
}

void mul_Matrix::thread_arrayA_0_sel() {
    arrayA_0_sel = arrayA_0_sel_rd.read();
}

void mul_Matrix::thread_arrayA_0_state_cmp_full() {
    arrayA_0_state_cmp_full =  (sc_logic) ((!arrayA_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(arrayA_0_state.read() != ap_const_lv2_1))[0];
}

void mul_Matrix::thread_arrayA_0_vld_in() {
    arrayA_0_vld_in = arrayA_TVALID.read();
}

void mul_Matrix::thread_arrayA_0_vld_out() {
    arrayA_0_vld_out = arrayA_0_state.read()[0];
}

void mul_Matrix::thread_arrayA_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        arrayA_TDATA_blk_n = arrayA_0_state.read()[0];
    } else {
        arrayA_TDATA_blk_n = ap_const_logic_1;
    }
}

void mul_Matrix::thread_arrayA_TREADY() {
    arrayA_TREADY = arrayA_0_state.read()[1];
}

void mul_Matrix::thread_arrayB_0_ack_in() {
    arrayB_0_ack_in = arrayB_0_state.read()[1];
}

void mul_Matrix::thread_arrayB_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        arrayB_0_ack_out = ap_const_logic_1;
    } else {
        arrayB_0_ack_out = ap_const_logic_0;
    }
}

void mul_Matrix::thread_arrayB_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayB_0_sel.read())) {
        arrayB_0_data_out = arrayB_0_payload_B.read();
    } else {
        arrayB_0_data_out = arrayB_0_payload_A.read();
    }
}

void mul_Matrix::thread_arrayB_0_load_A() {
    arrayB_0_load_A = (arrayB_0_state_cmp_full.read() & ~arrayB_0_sel_wr.read());
}

void mul_Matrix::thread_arrayB_0_load_B() {
    arrayB_0_load_B = (arrayB_0_sel_wr.read() & arrayB_0_state_cmp_full.read());
}

void mul_Matrix::thread_arrayB_0_sel() {
    arrayB_0_sel = arrayB_0_sel_rd.read();
}

void mul_Matrix::thread_arrayB_0_state_cmp_full() {
    arrayB_0_state_cmp_full =  (sc_logic) ((!arrayB_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(arrayB_0_state.read() != ap_const_lv2_1))[0];
}

void mul_Matrix::thread_arrayB_0_vld_in() {
    arrayB_0_vld_in = arrayB_TVALID.read();
}

void mul_Matrix::thread_arrayB_0_vld_out() {
    arrayB_0_vld_out = arrayB_0_state.read()[0];
}

void mul_Matrix::thread_arrayB_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        arrayB_TDATA_blk_n = arrayB_0_state.read()[0];
    } else {
        arrayB_TDATA_blk_n = ap_const_logic_1;
    }
}

void mul_Matrix::thread_arrayB_TREADY() {
    arrayB_TREADY = arrayB_0_state.read()[1];
}

void mul_Matrix::thread_arrayR_1_ack_in() {
    arrayR_1_ack_in = arrayR_1_state.read()[1];
}

void mul_Matrix::thread_arrayR_1_ack_out() {
    arrayR_1_ack_out = arrayR_TREADY.read();
}

void mul_Matrix::thread_arrayR_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, arrayR_1_sel.read())) {
        arrayR_1_data_out = arrayR_1_payload_B.read();
    } else {
        arrayR_1_data_out = arrayR_1_payload_A.read();
    }
}

void mul_Matrix::thread_arrayR_1_load_A() {
    arrayR_1_load_A = (arrayR_1_state_cmp_full.read() & ~arrayR_1_sel_wr.read());
}

void mul_Matrix::thread_arrayR_1_load_B() {
    arrayR_1_load_B = (arrayR_1_sel_wr.read() & arrayR_1_state_cmp_full.read());
}

void mul_Matrix::thread_arrayR_1_sel() {
    arrayR_1_sel = arrayR_1_sel_rd.read();
}

void mul_Matrix::thread_arrayR_1_state_cmp_full() {
    arrayR_1_state_cmp_full =  (sc_logic) ((!arrayR_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(arrayR_1_state.read() != ap_const_lv2_1))[0];
}

void mul_Matrix::thread_arrayR_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_4_fu_150_p2.read(), ap_const_lv1_0))) {
        arrayR_1_vld_in = ap_const_logic_1;
    } else {
        arrayR_1_vld_in = ap_const_logic_0;
    }
}

void mul_Matrix::thread_arrayR_1_vld_out() {
    arrayR_1_vld_out = arrayR_1_state.read()[0];
}

void mul_Matrix::thread_arrayR_TDATA() {
    arrayR_TDATA = arrayR_1_data_out.read();
}

void mul_Matrix::thread_arrayR_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(tmp_4_fu_150_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        arrayR_TDATA_blk_n = arrayR_1_state.read()[1];
    } else {
        arrayR_TDATA_blk_n = ap_const_logic_1;
    }
}

void mul_Matrix::thread_arrayR_TVALID() {
    arrayR_TVALID = arrayR_1_state.read()[0];
}

void mul_Matrix::thread_c_1_fu_140_p2() {
    c_1_fu_140_p2 = (!c_reg_84.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(c_reg_84.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void mul_Matrix::thread_exitcond_fu_135_p2() {
    exitcond_fu_135_p2 = (!c_reg_84.read().is_01() || !useLN_read_reg_177.read().is_01())? sc_lv<1>(): sc_lv<1>(c_reg_84.read() == useLN_read_reg_177.read());
}

void mul_Matrix::thread_grp_fu_169_p0() {
    grp_fu_169_p0 =  (sc_lv<8>) (grp_fu_169_p00.read());
}

void mul_Matrix::thread_grp_fu_169_p00() {
    grp_fu_169_p00 = esl_zext<16,8>(arrayA_0_data_out.read());
}

void mul_Matrix::thread_grp_fu_169_p1() {
    grp_fu_169_p1 =  (sc_lv<8>) (grp_fu_169_p10.read());
}

void mul_Matrix::thread_grp_fu_169_p10() {
    grp_fu_169_p10 = esl_zext<16,8>(arrayB_0_data_out.read());
}

void mul_Matrix::thread_k_1_fu_155_p2() {
    k_1_fu_155_p2 = (!k_reg_109.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(k_reg_109.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mul_Matrix::thread_k_cast_fu_146_p1() {
    k_cast_fu_146_p1 = esl_zext<32,31>(k_reg_109.read());
}

void mul_Matrix::thread_r_1_fu_129_p2() {
    r_1_fu_129_p2 = (!r_reg_73.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(r_reg_73.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void mul_Matrix::thread_r_cast_fu_120_p1() {
    r_cast_fu_120_p1 = esl_zext<32,31>(r_reg_73.read());
}

void mul_Matrix::thread_tmp_4_fu_150_p2() {
    tmp_4_fu_150_p2 = (!k_cast_fu_146_p1.read().is_01() || !useLM_read_reg_183.read().is_01())? sc_lv<1>(): (sc_bigint<32>(k_cast_fu_146_p1.read()) < sc_bigint<32>(useLM_read_reg_183.read()));
}

void mul_Matrix::thread_tmp_fu_124_p2() {
    tmp_fu_124_p2 = (!r_cast_fu_120_p1.read().is_01() || !useLN_read_reg_177.read().is_01())? sc_lv<1>(): (sc_bigint<32>(r_cast_fu_120_p1.read()) < sc_bigint<32>(useLN_read_reg_177.read()));
}

void mul_Matrix::thread_useLM_0_ack_out() {
    if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_0))) {
        useLM_0_ack_out = ap_const_logic_1;
    } else {
        useLM_0_ack_out = ap_const_logic_0;
    }
}

void mul_Matrix::thread_useLN_0_ack_out() {
    if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_0))) {
        useLN_0_ack_out = ap_const_logic_1;
    } else {
        useLN_0_ack_out = ap_const_logic_0;
    }
}

void mul_Matrix::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_fu_124_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_135_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_4_fu_150_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_state5_io.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_4_fu_150_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((!(esl_seteq<1,1,1>(arrayB_0_vld_out.read(), ap_const_logic_0) || esl_seteq<1,1,1>(arrayA_0_vld_out.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(arrayR_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void mul_Matrix::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arrayA_TDATA\" :  \"" << arrayA_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arrayA_TVALID\" :  \"" << arrayA_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arrayA_TREADY\" :  \"" << arrayA_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arrayB_TDATA\" :  \"" << arrayB_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arrayB_TVALID\" :  \"" << arrayB_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arrayB_TREADY\" :  \"" << arrayB_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arrayR_TDATA\" :  \"" << arrayR_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arrayR_TVALID\" :  \"" << arrayR_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arrayR_TREADY\" :  \"" << arrayR_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

