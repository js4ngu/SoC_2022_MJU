// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mul_Matrix_HH_
#define _mul_Matrix_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mul_Matrix_mac_mubkb.h"
#include "mul_Matrix_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct mul_Matrix : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > arrayA_TDATA;
    sc_in< sc_logic > arrayA_TVALID;
    sc_out< sc_logic > arrayA_TREADY;
    sc_in< sc_lv<8> > arrayB_TDATA;
    sc_in< sc_logic > arrayB_TVALID;
    sc_out< sc_logic > arrayB_TREADY;
    sc_out< sc_lv<32> > arrayR_TDATA;
    sc_out< sc_logic > arrayR_TVALID;
    sc_in< sc_logic > arrayR_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mul_Matrix(sc_module_name name);
    SC_HAS_PROCESS(mul_Matrix);

    ~mul_Matrix();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mul_Matrix_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* mul_Matrix_AXILiteS_s_axi_U;
    mul_Matrix_mac_mubkb<1,1,8,8,32,32>* mul_Matrix_mac_mubkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > useLM;
    sc_signal< sc_lv<32> > useLM_0_data_reg;
    sc_signal< sc_logic > useLM_0_vld_reg;
    sc_signal< sc_logic > useLM_0_ack_out;
    sc_signal< sc_lv<32> > useLN;
    sc_signal< sc_lv<32> > useLN_0_data_reg;
    sc_signal< sc_logic > useLN_0_vld_reg;
    sc_signal< sc_logic > useLN_0_ack_out;
    sc_signal< sc_lv<32> > useLP;
    sc_signal< sc_lv<8> > arrayA_0_data_out;
    sc_signal< sc_logic > arrayA_0_vld_in;
    sc_signal< sc_logic > arrayA_0_vld_out;
    sc_signal< sc_logic > arrayA_0_ack_in;
    sc_signal< sc_logic > arrayA_0_ack_out;
    sc_signal< sc_lv<8> > arrayA_0_payload_A;
    sc_signal< sc_lv<8> > arrayA_0_payload_B;
    sc_signal< sc_logic > arrayA_0_sel_rd;
    sc_signal< sc_logic > arrayA_0_sel_wr;
    sc_signal< sc_logic > arrayA_0_sel;
    sc_signal< sc_logic > arrayA_0_load_A;
    sc_signal< sc_logic > arrayA_0_load_B;
    sc_signal< sc_lv<2> > arrayA_0_state;
    sc_signal< sc_logic > arrayA_0_state_cmp_full;
    sc_signal< sc_lv<8> > arrayB_0_data_out;
    sc_signal< sc_logic > arrayB_0_vld_in;
    sc_signal< sc_logic > arrayB_0_vld_out;
    sc_signal< sc_logic > arrayB_0_ack_in;
    sc_signal< sc_logic > arrayB_0_ack_out;
    sc_signal< sc_lv<8> > arrayB_0_payload_A;
    sc_signal< sc_lv<8> > arrayB_0_payload_B;
    sc_signal< sc_logic > arrayB_0_sel_rd;
    sc_signal< sc_logic > arrayB_0_sel_wr;
    sc_signal< sc_logic > arrayB_0_sel;
    sc_signal< sc_logic > arrayB_0_load_A;
    sc_signal< sc_logic > arrayB_0_load_B;
    sc_signal< sc_lv<2> > arrayB_0_state;
    sc_signal< sc_logic > arrayB_0_state_cmp_full;
    sc_signal< sc_lv<32> > arrayR_1_data_out;
    sc_signal< sc_logic > arrayR_1_vld_in;
    sc_signal< sc_logic > arrayR_1_vld_out;
    sc_signal< sc_logic > arrayR_1_ack_in;
    sc_signal< sc_logic > arrayR_1_ack_out;
    sc_signal< sc_lv<32> > arrayR_1_payload_A;
    sc_signal< sc_lv<32> > arrayR_1_payload_B;
    sc_signal< sc_logic > arrayR_1_sel_rd;
    sc_signal< sc_logic > arrayR_1_sel_wr;
    sc_signal< sc_logic > arrayR_1_sel;
    sc_signal< sc_logic > arrayR_1_load_A;
    sc_signal< sc_logic > arrayR_1_load_B;
    sc_signal< sc_lv<2> > arrayR_1_state;
    sc_signal< sc_logic > arrayR_1_state_cmp_full;
    sc_signal< sc_logic > arrayA_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > arrayB_TDATA_blk_n;
    sc_signal< sc_logic > arrayR_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_4_fu_150_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > useLN_read_reg_177;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > useLM_read_reg_183;
    sc_signal< sc_lv<31> > r_1_fu_129_p2;
    sc_signal< sc_lv<31> > r_1_reg_191;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > c_1_fu_140_p2;
    sc_signal< sc_lv<32> > c_1_reg_199;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<31> > k_1_fu_155_p2;
    sc_signal< sc_lv<31> > k_1_reg_207;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< sc_lv<32> > grp_fu_169_p3;
    sc_signal< bool > ap_block_state6;
    sc_signal< sc_lv<31> > r_reg_73;
    sc_signal< sc_lv<1> > exitcond_fu_135_p2;
    sc_signal< sc_lv<32> > c_reg_84;
    sc_signal< sc_lv<1> > tmp_fu_124_p2;
    sc_signal< sc_lv<32> > sum_reg_95;
    sc_signal< sc_lv<31> > k_reg_109;
    sc_signal< sc_lv<32> > r_cast_fu_120_p1;
    sc_signal< sc_lv<32> > k_cast_fu_146_p1;
    sc_signal< sc_lv<8> > grp_fu_169_p0;
    sc_signal< sc_lv<8> > grp_fu_169_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_lv<16> > grp_fu_169_p00;
    sc_signal< sc_lv<16> > grp_fu_169_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state5_io();
    void thread_ap_block_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_arrayA_0_ack_in();
    void thread_arrayA_0_ack_out();
    void thread_arrayA_0_data_out();
    void thread_arrayA_0_load_A();
    void thread_arrayA_0_load_B();
    void thread_arrayA_0_sel();
    void thread_arrayA_0_state_cmp_full();
    void thread_arrayA_0_vld_in();
    void thread_arrayA_0_vld_out();
    void thread_arrayA_TDATA_blk_n();
    void thread_arrayA_TREADY();
    void thread_arrayB_0_ack_in();
    void thread_arrayB_0_ack_out();
    void thread_arrayB_0_data_out();
    void thread_arrayB_0_load_A();
    void thread_arrayB_0_load_B();
    void thread_arrayB_0_sel();
    void thread_arrayB_0_state_cmp_full();
    void thread_arrayB_0_vld_in();
    void thread_arrayB_0_vld_out();
    void thread_arrayB_TDATA_blk_n();
    void thread_arrayB_TREADY();
    void thread_arrayR_1_ack_in();
    void thread_arrayR_1_ack_out();
    void thread_arrayR_1_data_out();
    void thread_arrayR_1_load_A();
    void thread_arrayR_1_load_B();
    void thread_arrayR_1_sel();
    void thread_arrayR_1_state_cmp_full();
    void thread_arrayR_1_vld_in();
    void thread_arrayR_1_vld_out();
    void thread_arrayR_TDATA();
    void thread_arrayR_TDATA_blk_n();
    void thread_arrayR_TVALID();
    void thread_c_1_fu_140_p2();
    void thread_exitcond_fu_135_p2();
    void thread_grp_fu_169_p0();
    void thread_grp_fu_169_p00();
    void thread_grp_fu_169_p1();
    void thread_grp_fu_169_p10();
    void thread_k_1_fu_155_p2();
    void thread_k_cast_fu_146_p1();
    void thread_r_1_fu_129_p2();
    void thread_r_cast_fu_120_p1();
    void thread_tmp_4_fu_150_p2();
    void thread_tmp_fu_124_p2();
    void thread_useLM_0_ack_out();
    void thread_useLN_0_ack_out();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
