// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixMul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=595,HLS_SYN_LUT=719,HLS_VERSION=2018_2}" *)

module matrixMul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lm,
        ln,
        lp,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        c_address0,
        c_ce0,
        c_we0,
        c_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lm;
input  [31:0] ln;
input  [31:0] lp;
output  [14:0] in_r_address0;
output   in_r_ce0;
input  [7:0] in_r_q0;
output  [13:0] c_address0;
output   c_ce0;
output   c_we0;
output  [31:0] c_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] in_r_address0;
reg in_r_ce0;
reg c_ce0;
reg c_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] i_1_fu_234_p2;
reg   [30:0] i_1_reg_511;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_8_cast_fu_244_p3;
reg   [16:0] tmp_8_cast_reg_516;
wire   [0:0] tmp_fu_229_p2;
wire   [30:0] j_1_fu_261_p2;
reg   [30:0] j_1_reg_524;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_9_cast_fu_276_p1;
reg   [63:0] tmp_9_cast_reg_529;
wire   [0:0] tmp_2_fu_256_p2;
wire   [30:0] i_2_fu_290_p2;
reg   [30:0] i_2_reg_542;
wire    ap_CS_fsm_state5;
wire   [16:0] tmp_16_cast2_fu_306_p3;
reg   [16:0] tmp_16_cast2_reg_547;
wire   [0:0] tmp_3_fu_285_p2;
wire   [15:0] tmp_18_cast_fu_318_p3;
reg   [15:0] tmp_18_cast_reg_552;
wire   [30:0] j_2_fu_335_p2;
reg   [30:0] j_2_reg_560;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_s_fu_330_p2;
wire   [15:0] tmp_16_fu_359_p2;
reg   [15:0] tmp_16_reg_570;
wire   [30:0] i_3_fu_377_p2;
reg   [30:0] i_3_reg_578;
wire    ap_CS_fsm_state8;
wire   [15:0] tmp_22_cast_fu_387_p3;
reg   [15:0] tmp_22_cast_reg_583;
wire   [0:0] tmp_5_fu_372_p2;
wire   [30:0] j_3_fu_404_p2;
reg   [30:0] j_3_reg_592;
wire    ap_CS_fsm_state9;
wire   [15:0] tmp_18_fu_410_p1;
reg   [15:0] tmp_18_reg_597;
wire   [0:0] tmp_11_fu_399_p2;
reg   [13:0] c_addr_reg_602;
wire   [30:0] n_1_fu_433_p2;
reg   [30:0] n_1_reg_610;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_13_fu_428_p2;
wire   [7:0] a_q0;
reg   [7:0] a_load_reg_625;
wire    ap_CS_fsm_state11;
wire   [7:0] b_q0;
reg   [7:0] b_load_reg_630;
wire   [31:0] grp_fu_481_p3;
wire    ap_CS_fsm_state12;
reg   [13:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [13:0] b_address0;
reg    b_ce0;
reg    b_we0;
reg   [30:0] i_reg_135;
reg   [30:0] j_reg_146;
wire    ap_CS_fsm_state4;
reg   [30:0] i1_reg_157;
reg   [30:0] j2_reg_168;
wire    ap_CS_fsm_state7;
reg   [30:0] i3_reg_179;
reg   [30:0] j4_reg_190;
reg   [31:0] sum_reg_201;
reg   [30:0] n_reg_214;
wire  signed [63:0] tmp_19_cast_fu_354_p1;
wire   [63:0] tmp_20_cast_fu_364_p1;
wire   [63:0] tmp_23_cast_fu_419_p1;
wire   [63:0] tmp_24_cast_fu_448_p1;
wire   [63:0] tmp_27_cast_fu_470_p1;
wire   [31:0] i_cast_fu_225_p1;
wire   [9:0] tmp_1_fu_240_p1;
wire   [31:0] j_cast_fu_252_p1;
wire   [16:0] tmp_4_fu_267_p1;
wire   [16:0] tmp_9_fu_271_p2;
wire   [31:0] i1_cast_fu_281_p1;
wire   [9:0] tmp_6_fu_296_p1;
wire   [9:0] tmp_7_fu_300_p2;
wire   [8:0] tmp_8_fu_314_p1;
wire   [31:0] j2_cast_fu_326_p1;
wire   [16:0] tmp_12_fu_345_p1;
wire   [16:0] tmp_14_fu_349_p2;
wire   [15:0] tmp_10_fu_341_p1;
wire   [31:0] i3_cast_fu_368_p1;
wire   [8:0] tmp_17_fu_383_p1;
wire   [31:0] j4_cast_fu_395_p1;
wire   [15:0] tmp_19_fu_414_p2;
wire   [31:0] n_cast_fu_424_p1;
wire   [15:0] tmp_20_fu_439_p1;
wire   [15:0] tmp_21_fu_443_p2;
wire   [8:0] tmp_22_fu_453_p1;
wire   [15:0] tmp_26_cast_fu_457_p3;
wire   [15:0] tmp_23_fu_465_p2;
wire   [7:0] grp_fu_481_p0;
wire   [7:0] grp_fu_481_p1;
reg   [11:0] ap_NS_fsm;
wire   [15:0] grp_fu_481_p00;
wire   [15:0] grp_fu_481_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

matrixMul_a #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(in_r_q0),
    .q0(a_q0)
);

matrixMul_a #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(in_r_q0),
    .q0(b_q0)
);

matrixMul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixMul_mac_mulbkb_U1(
    .din0(grp_fu_481_p0),
    .din1(grp_fu_481_p1),
    .din2(sum_reg_201),
    .dout(grp_fu_481_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_157 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_s_fu_330_p2 == 1'd0))) begin
        i1_reg_157 <= i_2_reg_542;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i3_reg_179 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_11_fu_399_p2 == 1'd0))) begin
        i3_reg_179 <= i_3_reg_578;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_135 <= i_1_reg_511;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_135 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_reg_168 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j2_reg_168 <= j_2_reg_560;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        j4_reg_190 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_13_fu_428_p2 == 1'd0))) begin
        j4_reg_190 <= j_3_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_146 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_146 <= j_1_reg_524;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        n_reg_214 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        n_reg_214 <= n_1_reg_610;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        sum_reg_201 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_201 <= grp_fu_481_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        a_load_reg_625 <= a_q0;
        b_load_reg_630 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_11_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        c_addr_reg_602 <= tmp_23_cast_fu_419_p1;
        tmp_18_reg_597 <= tmp_18_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_511 <= i_1_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_542 <= i_2_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_578 <= i_3_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_524 <= j_1_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_560 <= j_2_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_3_reg_592 <= j_3_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        n_1_reg_610 <= n_1_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_16_cast2_reg_547[16 : 7] <= tmp_16_cast2_fu_306_p3[16 : 7];
        tmp_18_cast_reg_552[15 : 7] <= tmp_18_cast_fu_318_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_16_reg_570 <= tmp_16_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_372_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_22_cast_reg_583[15 : 7] <= tmp_22_cast_fu_387_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_8_cast_reg_516[16 : 7] <= tmp_8_cast_fu_244_p3[16 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_9_cast_reg_529[16 : 0] <= tmp_9_cast_fu_276_p1[16 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_address0 = tmp_24_cast_fu_448_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_address0 = tmp_9_cast_reg_529;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_5_fu_372_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_5_fu_372_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_address0 = tmp_27_cast_fu_470_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        b_address0 = tmp_20_cast_fu_364_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_13_fu_428_p2 == 1'd0))) begin
        c_we0 = 1'b1;
    end else begin
        c_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_address0 = tmp_19_cast_fu_354_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_address0 = tmp_9_cast_fu_276_p1;
    end else begin
        in_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_2_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_3_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_s_fu_330_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_5_fu_372_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_11_fu_399_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_13_fu_428_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_address0 = c_addr_reg_602;

assign c_d0 = sum_reg_201;

assign grp_fu_481_p0 = grp_fu_481_p00;

assign grp_fu_481_p00 = b_load_reg_630;

assign grp_fu_481_p1 = grp_fu_481_p10;

assign grp_fu_481_p10 = a_load_reg_625;

assign i1_cast_fu_281_p1 = i1_reg_157;

assign i3_cast_fu_368_p1 = i3_reg_179;

assign i_1_fu_234_p2 = (i_reg_135 + 31'd1);

assign i_2_fu_290_p2 = (i1_reg_157 + 31'd1);

assign i_3_fu_377_p2 = (i3_reg_179 + 31'd1);

assign i_cast_fu_225_p1 = i_reg_135;

assign j2_cast_fu_326_p1 = j2_reg_168;

assign j4_cast_fu_395_p1 = j4_reg_190;

assign j_1_fu_261_p2 = (j_reg_146 + 31'd1);

assign j_2_fu_335_p2 = (j2_reg_168 + 31'd1);

assign j_3_fu_404_p2 = (j4_reg_190 + 31'd1);

assign j_cast_fu_252_p1 = j_reg_146;

assign n_1_fu_433_p2 = (n_reg_214 + 31'd1);

assign n_cast_fu_424_p1 = n_reg_214;

assign tmp_10_fu_341_p1 = j2_reg_168[15:0];

assign tmp_11_fu_399_p2 = (($signed(j4_cast_fu_395_p1) < $signed(lp)) ? 1'b1 : 1'b0);

assign tmp_12_fu_345_p1 = j2_reg_168[16:0];

assign tmp_13_fu_428_p2 = (($signed(n_cast_fu_424_p1) < $signed(ln)) ? 1'b1 : 1'b0);

assign tmp_14_fu_349_p2 = (tmp_16_cast2_reg_547 + tmp_12_fu_345_p1);

assign tmp_16_cast2_fu_306_p3 = {{tmp_7_fu_300_p2}, {7'd0}};

assign tmp_16_fu_359_p2 = (tmp_18_cast_reg_552 + tmp_10_fu_341_p1);

assign tmp_17_fu_383_p1 = i3_reg_179[8:0];

assign tmp_18_cast_fu_318_p3 = {{tmp_8_fu_314_p1}, {7'd0}};

assign tmp_18_fu_410_p1 = j4_reg_190[15:0];

assign tmp_19_cast_fu_354_p1 = $signed(tmp_14_fu_349_p2);

assign tmp_19_fu_414_p2 = (tmp_22_cast_reg_583 + tmp_18_fu_410_p1);

assign tmp_1_fu_240_p1 = i_reg_135[9:0];

assign tmp_20_cast_fu_364_p1 = tmp_16_reg_570;

assign tmp_20_fu_439_p1 = n_reg_214[15:0];

assign tmp_21_fu_443_p2 = (tmp_22_cast_reg_583 + tmp_20_fu_439_p1);

assign tmp_22_cast_fu_387_p3 = {{tmp_17_fu_383_p1}, {7'd0}};

assign tmp_22_fu_453_p1 = n_reg_214[8:0];

assign tmp_23_cast_fu_419_p1 = tmp_19_fu_414_p2;

assign tmp_23_fu_465_p2 = (tmp_26_cast_fu_457_p3 + tmp_18_reg_597);

assign tmp_24_cast_fu_448_p1 = tmp_21_fu_443_p2;

assign tmp_26_cast_fu_457_p3 = {{tmp_22_fu_453_p1}, {7'd0}};

assign tmp_27_cast_fu_470_p1 = tmp_23_fu_465_p2;

assign tmp_2_fu_256_p2 = (($signed(j_cast_fu_252_p1) < $signed(ln)) ? 1'b1 : 1'b0);

assign tmp_3_fu_285_p2 = (($signed(i1_cast_fu_281_p1) < $signed(ln)) ? 1'b1 : 1'b0);

assign tmp_4_fu_267_p1 = j_reg_146[16:0];

assign tmp_5_fu_372_p2 = (($signed(i3_cast_fu_368_p1) < $signed(lm)) ? 1'b1 : 1'b0);

assign tmp_6_fu_296_p1 = i1_reg_157[9:0];

assign tmp_7_fu_300_p2 = (10'd128 + tmp_6_fu_296_p1);

assign tmp_8_cast_fu_244_p3 = {{tmp_1_fu_240_p1}, {7'd0}};

assign tmp_8_fu_314_p1 = i1_reg_157[8:0];

assign tmp_9_cast_fu_276_p1 = tmp_9_fu_271_p2;

assign tmp_9_fu_271_p2 = (tmp_8_cast_reg_516 + tmp_4_fu_267_p1);

assign tmp_fu_229_p2 = (($signed(i_cast_fu_225_p1) < $signed(lm)) ? 1'b1 : 1'b0);

assign tmp_s_fu_330_p2 = (($signed(j2_cast_fu_326_p1) < $signed(lp)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_8_cast_reg_516[6:0] <= 7'b0000000;
    tmp_9_cast_reg_529[63:17] <= 47'b00000000000000000000000000000000000000000000000;
    tmp_16_cast2_reg_547[6:0] <= 7'b0000000;
    tmp_18_cast_reg_552[6:0] <= 7'b0000000;
    tmp_22_cast_reg_583[6:0] <= 7'b0000000;
end

endmodule //matrixMul
