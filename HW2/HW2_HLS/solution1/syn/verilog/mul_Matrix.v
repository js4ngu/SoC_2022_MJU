// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mul_Matrix,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=607,HLS_SYN_LUT=617,HLS_VERSION=2018_2}" *)

module mul_Matrix (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        arrayA_TDATA,
        arrayA_TVALID,
        arrayA_TREADY,
        arrayB_TDATA,
        arrayB_TVALID,
        arrayB_TREADY,
        arrayR_TDATA,
        arrayR_TVALID,
        arrayR_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] arrayA_TDATA;
input   arrayA_TVALID;
output   arrayA_TREADY;
input  [7:0] arrayB_TDATA;
input   arrayB_TVALID;
output   arrayB_TREADY;
output  [31:0] arrayR_TDATA;
output   arrayR_TVALID;
input   arrayR_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] useLM;
reg   [31:0] useLM_0_data_reg;
reg    useLM_0_vld_reg;
reg    useLM_0_ack_out;
wire   [31:0] useLN;
reg   [31:0] useLN_0_data_reg;
reg    useLN_0_vld_reg;
reg    useLN_0_ack_out;
wire   [31:0] useLP;
reg   [7:0] arrayA_0_data_out;
wire    arrayA_0_vld_in;
wire    arrayA_0_vld_out;
wire    arrayA_0_ack_in;
reg    arrayA_0_ack_out;
reg   [7:0] arrayA_0_payload_A;
reg   [7:0] arrayA_0_payload_B;
reg    arrayA_0_sel_rd;
reg    arrayA_0_sel_wr;
wire    arrayA_0_sel;
wire    arrayA_0_load_A;
wire    arrayA_0_load_B;
reg   [1:0] arrayA_0_state;
wire    arrayA_0_state_cmp_full;
reg   [7:0] arrayB_0_data_out;
wire    arrayB_0_vld_in;
wire    arrayB_0_vld_out;
wire    arrayB_0_ack_in;
reg    arrayB_0_ack_out;
reg   [7:0] arrayB_0_payload_A;
reg   [7:0] arrayB_0_payload_B;
reg    arrayB_0_sel_rd;
reg    arrayB_0_sel_wr;
wire    arrayB_0_sel;
wire    arrayB_0_load_A;
wire    arrayB_0_load_B;
reg   [1:0] arrayB_0_state;
wire    arrayB_0_state_cmp_full;
reg   [31:0] arrayR_1_data_out;
reg    arrayR_1_vld_in;
wire    arrayR_1_vld_out;
wire    arrayR_1_ack_in;
wire    arrayR_1_ack_out;
reg   [31:0] arrayR_1_payload_A;
reg   [31:0] arrayR_1_payload_B;
reg    arrayR_1_sel_rd;
reg    arrayR_1_sel_wr;
wire    arrayR_1_sel;
wire    arrayR_1_load_A;
wire    arrayR_1_load_B;
reg   [1:0] arrayR_1_state;
wire    arrayR_1_state_cmp_full;
reg    arrayA_TDATA_blk_n;
wire    ap_CS_fsm_state6;
reg    arrayB_TDATA_blk_n;
reg    arrayR_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_4_fu_150_p2;
wire    ap_CS_fsm_state7;
reg   [31:0] useLN_read_reg_177;
wire    ap_CS_fsm_state2;
reg   [31:0] useLM_read_reg_183;
wire   [30:0] r_1_fu_129_p2;
reg   [30:0] r_1_reg_191;
wire    ap_CS_fsm_state3;
wire   [31:0] c_1_fu_140_p2;
reg   [31:0] c_1_reg_199;
wire    ap_CS_fsm_state4;
wire   [30:0] k_1_fu_155_p2;
reg   [30:0] k_1_reg_207;
reg    ap_block_state5_io;
wire   [31:0] grp_fu_169_p3;
reg    ap_block_state6;
reg   [30:0] r_reg_73;
wire   [0:0] exitcond_fu_135_p2;
reg   [31:0] c_reg_84;
wire   [0:0] tmp_fu_124_p2;
reg   [31:0] sum_reg_95;
reg   [30:0] k_reg_109;
wire   [31:0] r_cast_fu_120_p1;
wire   [31:0] k_cast_fu_146_p1;
wire   [7:0] grp_fu_169_p0;
wire   [7:0] grp_fu_169_p1;
reg   [6:0] ap_NS_fsm;
wire   [15:0] grp_fu_169_p00;
wire   [15:0] grp_fu_169_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 useLM_0_data_reg = 32'd0;
#0 useLM_0_vld_reg = 1'b0;
#0 useLN_0_data_reg = 32'd0;
#0 useLN_0_vld_reg = 1'b0;
#0 arrayA_0_sel_rd = 1'b0;
#0 arrayA_0_sel_wr = 1'b0;
#0 arrayA_0_state = 2'd0;
#0 arrayB_0_sel_rd = 1'b0;
#0 arrayB_0_sel_wr = 1'b0;
#0 arrayB_0_state = 2'd0;
#0 arrayR_1_sel_rd = 1'b0;
#0 arrayR_1_sel_wr = 1'b0;
#0 arrayR_1_state = 2'd0;
end

mul_Matrix_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
mul_Matrix_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .useLM(useLM),
    .useLN(useLN),
    .useLP(useLP)
);

mul_Matrix_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_Matrix_mac_mubkb_U1(
    .din0(grp_fu_169_p0),
    .din1(grp_fu_169_p1),
    .din2(sum_reg_95),
    .dout(grp_fu_169_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayA_0_sel_rd <= 1'b0;
    end else begin
        if (((arrayA_0_ack_out == 1'b1) & (arrayA_0_vld_out == 1'b1))) begin
            arrayA_0_sel_rd <= ~arrayA_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayA_0_sel_wr <= 1'b0;
    end else begin
        if (((arrayA_0_ack_in == 1'b1) & (arrayA_0_vld_in == 1'b1))) begin
            arrayA_0_sel_wr <= ~arrayA_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayA_0_state <= 2'd0;
    end else begin
        if ((((arrayA_0_vld_in == 1'b0) & (arrayA_0_state == 2'd2)) | ((arrayA_0_vld_in == 1'b0) & (arrayA_0_ack_out == 1'b1) & (arrayA_0_state == 2'd3)))) begin
            arrayA_0_state <= 2'd2;
        end else if ((((arrayA_0_ack_out == 1'b0) & (arrayA_0_state == 2'd1)) | ((arrayA_0_ack_out == 1'b0) & (arrayA_0_vld_in == 1'b1) & (arrayA_0_state == 2'd3)))) begin
            arrayA_0_state <= 2'd1;
        end else if (((~((arrayA_0_vld_in == 1'b0) & (arrayA_0_ack_out == 1'b1)) & ~((arrayA_0_ack_out == 1'b0) & (arrayA_0_vld_in == 1'b1)) & (arrayA_0_state == 2'd3)) | ((arrayA_0_ack_out == 1'b1) & (arrayA_0_state == 2'd1)) | ((arrayA_0_vld_in == 1'b1) & (arrayA_0_state == 2'd2)))) begin
            arrayA_0_state <= 2'd3;
        end else begin
            arrayA_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayB_0_sel_rd <= 1'b0;
    end else begin
        if (((arrayB_0_ack_out == 1'b1) & (arrayB_0_vld_out == 1'b1))) begin
            arrayB_0_sel_rd <= ~arrayB_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayB_0_sel_wr <= 1'b0;
    end else begin
        if (((arrayB_0_ack_in == 1'b1) & (arrayB_0_vld_in == 1'b1))) begin
            arrayB_0_sel_wr <= ~arrayB_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayB_0_state <= 2'd0;
    end else begin
        if ((((arrayB_0_vld_in == 1'b0) & (arrayB_0_state == 2'd2)) | ((arrayB_0_vld_in == 1'b0) & (arrayB_0_ack_out == 1'b1) & (arrayB_0_state == 2'd3)))) begin
            arrayB_0_state <= 2'd2;
        end else if ((((arrayB_0_ack_out == 1'b0) & (arrayB_0_state == 2'd1)) | ((arrayB_0_ack_out == 1'b0) & (arrayB_0_vld_in == 1'b1) & (arrayB_0_state == 2'd3)))) begin
            arrayB_0_state <= 2'd1;
        end else if (((~((arrayB_0_vld_in == 1'b0) & (arrayB_0_ack_out == 1'b1)) & ~((arrayB_0_ack_out == 1'b0) & (arrayB_0_vld_in == 1'b1)) & (arrayB_0_state == 2'd3)) | ((arrayB_0_ack_out == 1'b1) & (arrayB_0_state == 2'd1)) | ((arrayB_0_vld_in == 1'b1) & (arrayB_0_state == 2'd2)))) begin
            arrayB_0_state <= 2'd3;
        end else begin
            arrayB_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayR_1_sel_rd <= 1'b0;
    end else begin
        if (((arrayR_1_ack_out == 1'b1) & (arrayR_1_vld_out == 1'b1))) begin
            arrayR_1_sel_rd <= ~arrayR_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayR_1_sel_wr <= 1'b0;
    end else begin
        if (((arrayR_1_ack_in == 1'b1) & (arrayR_1_vld_in == 1'b1))) begin
            arrayR_1_sel_wr <= ~arrayR_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        arrayR_1_state <= 2'd0;
    end else begin
        if ((((arrayR_1_vld_in == 1'b0) & (arrayR_1_state == 2'd2)) | ((arrayR_1_vld_in == 1'b0) & (arrayR_1_ack_out == 1'b1) & (arrayR_1_state == 2'd3)))) begin
            arrayR_1_state <= 2'd2;
        end else if ((((arrayR_1_ack_out == 1'b0) & (arrayR_1_state == 2'd1)) | ((arrayR_1_ack_out == 1'b0) & (arrayR_1_vld_in == 1'b1) & (arrayR_1_state == 2'd3)))) begin
            arrayR_1_state <= 2'd1;
        end else if (((~((arrayR_1_vld_in == 1'b0) & (arrayR_1_ack_out == 1'b1)) & ~((arrayR_1_ack_out == 1'b0) & (arrayR_1_vld_in == 1'b1)) & (arrayR_1_state == 2'd3)) | ((arrayR_1_ack_out == 1'b1) & (arrayR_1_state == 2'd1)) | ((arrayR_1_vld_in == 1'b1) & (arrayR_1_state == 2'd2)))) begin
            arrayR_1_state <= 2'd3;
        end else begin
            arrayR_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((arrayR_1_ack_in == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd1))) begin
            c_reg_84 <= 32'd0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            c_reg_84 <= c_1_reg_199;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_135_p2 == 1'd0))) begin
        k_reg_109 <= 31'd0;
    end else if ((~((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_109 <= k_1_reg_207;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_135_p2 == 1'd1))) begin
        r_reg_73 <= r_1_reg_191;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_73 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_135_p2 == 1'd0))) begin
        sum_reg_95 <= 32'd0;
    end else if ((~((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_reg_95 <= grp_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayA_0_load_A == 1'b1)) begin
        arrayA_0_payload_A <= arrayA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayA_0_load_B == 1'b1)) begin
        arrayA_0_payload_B <= arrayA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayB_0_load_A == 1'b1)) begin
        arrayB_0_payload_A <= arrayB_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayB_0_load_B == 1'b1)) begin
        arrayB_0_payload_B <= arrayB_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayR_1_load_A == 1'b1)) begin
        arrayR_1_payload_A <= sum_reg_95;
    end
end

always @ (posedge ap_clk) begin
    if ((arrayR_1_load_B == 1'b1)) begin
        arrayR_1_payload_B <= sum_reg_95;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_1_reg_199 <= c_1_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5))) begin
        k_1_reg_207 <= k_1_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_1_reg_191 <= r_1_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (useLM_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (useLM_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (useLM_0_vld_reg == 1'b1)))) begin
        useLM_0_data_reg <= useLM;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        useLM_read_reg_183 <= useLM_0_data_reg;
        useLN_read_reg_177 <= useLN_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (useLN_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (useLN_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (useLN_0_vld_reg == 1'b1)))) begin
        useLN_0_data_reg <= useLN;
    end
end

always @ (*) begin
    if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        arrayA_0_ack_out = 1'b1;
    end else begin
        arrayA_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((arrayA_0_sel == 1'b1)) begin
        arrayA_0_data_out = arrayA_0_payload_B;
    end else begin
        arrayA_0_data_out = arrayA_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arrayA_TDATA_blk_n = arrayA_0_state[1'd0];
    end else begin
        arrayA_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        arrayB_0_ack_out = 1'b1;
    end else begin
        arrayB_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((arrayB_0_sel == 1'b1)) begin
        arrayB_0_data_out = arrayB_0_payload_B;
    end else begin
        arrayB_0_data_out = arrayB_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        arrayB_TDATA_blk_n = arrayB_0_state[1'd0];
    end else begin
        arrayB_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((arrayR_1_sel == 1'b1)) begin
        arrayR_1_data_out = arrayR_1_payload_B;
    end else begin
        arrayR_1_data_out = arrayR_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (tmp_4_fu_150_p2 == 1'd0))) begin
        arrayR_1_vld_in = 1'b1;
    end else begin
        arrayR_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state5) & (tmp_4_fu_150_p2 == 1'd0)))) begin
        arrayR_TDATA_blk_n = arrayR_1_state[1'd1];
    end else begin
        arrayR_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        useLM_0_ack_out = 1'b1;
    end else begin
        useLM_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
        useLN_0_ack_out = 1'b1;
    end else begin
        useLN_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3) & (tmp_fu_124_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_135_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (tmp_4_fu_150_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if (((1'b0 == ap_block_state5_io) & (1'b1 == ap_CS_fsm_state5) & (tmp_4_fu_150_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((arrayR_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state5_io = ((arrayR_1_ack_in == 1'b0) & (tmp_4_fu_150_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state6 = ((arrayB_0_vld_out == 1'b0) | (arrayA_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign arrayA_0_ack_in = arrayA_0_state[1'd1];

assign arrayA_0_load_A = (~arrayA_0_sel_wr & arrayA_0_state_cmp_full);

assign arrayA_0_load_B = (arrayA_0_state_cmp_full & arrayA_0_sel_wr);

assign arrayA_0_sel = arrayA_0_sel_rd;

assign arrayA_0_state_cmp_full = ((arrayA_0_state != 2'd1) ? 1'b1 : 1'b0);

assign arrayA_0_vld_in = arrayA_TVALID;

assign arrayA_0_vld_out = arrayA_0_state[1'd0];

assign arrayA_TREADY = arrayA_0_state[1'd1];

assign arrayB_0_ack_in = arrayB_0_state[1'd1];

assign arrayB_0_load_A = (~arrayB_0_sel_wr & arrayB_0_state_cmp_full);

assign arrayB_0_load_B = (arrayB_0_state_cmp_full & arrayB_0_sel_wr);

assign arrayB_0_sel = arrayB_0_sel_rd;

assign arrayB_0_state_cmp_full = ((arrayB_0_state != 2'd1) ? 1'b1 : 1'b0);

assign arrayB_0_vld_in = arrayB_TVALID;

assign arrayB_0_vld_out = arrayB_0_state[1'd0];

assign arrayB_TREADY = arrayB_0_state[1'd1];

assign arrayR_1_ack_in = arrayR_1_state[1'd1];

assign arrayR_1_ack_out = arrayR_TREADY;

assign arrayR_1_load_A = (~arrayR_1_sel_wr & arrayR_1_state_cmp_full);

assign arrayR_1_load_B = (arrayR_1_state_cmp_full & arrayR_1_sel_wr);

assign arrayR_1_sel = arrayR_1_sel_rd;

assign arrayR_1_state_cmp_full = ((arrayR_1_state != 2'd1) ? 1'b1 : 1'b0);

assign arrayR_1_vld_out = arrayR_1_state[1'd0];

assign arrayR_TDATA = arrayR_1_data_out;

assign arrayR_TVALID = arrayR_1_state[1'd0];

assign c_1_fu_140_p2 = (c_reg_84 + 32'd1);

assign exitcond_fu_135_p2 = ((c_reg_84 == useLN_read_reg_177) ? 1'b1 : 1'b0);

assign grp_fu_169_p0 = grp_fu_169_p00;

assign grp_fu_169_p00 = arrayA_0_data_out;

assign grp_fu_169_p1 = grp_fu_169_p10;

assign grp_fu_169_p10 = arrayB_0_data_out;

assign k_1_fu_155_p2 = (k_reg_109 + 31'd1);

assign k_cast_fu_146_p1 = k_reg_109;

assign r_1_fu_129_p2 = (r_reg_73 + 31'd1);

assign r_cast_fu_120_p1 = r_reg_73;

assign tmp_4_fu_150_p2 = (($signed(k_cast_fu_146_p1) < $signed(useLM_read_reg_183)) ? 1'b1 : 1'b0);

assign tmp_fu_124_p2 = (($signed(r_cast_fu_120_p1) < $signed(useLN_read_reg_177)) ? 1'b1 : 1'b0);

endmodule //mul_Matrix
