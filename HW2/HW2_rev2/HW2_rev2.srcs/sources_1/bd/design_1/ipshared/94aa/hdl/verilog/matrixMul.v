// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixMul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=995,HLS_SYN_LUT=972,HLS_VERSION=2018_2}" *)

module matrixMul (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        c_TDATA,
        c_TVALID,
        c_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
output  [31:0] c_TDATA;
output   c_TVALID;
input   c_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] lm;
reg   [31:0] lm_0_data_reg;
reg    lm_0_vld_reg;
reg    lm_0_ack_out;
wire   [31:0] ln;
reg   [31:0] ln_0_data_reg;
reg    ln_0_vld_reg;
reg    ln_0_ack_out;
wire   [31:0] lp;
reg   [31:0] lp_0_data_reg;
reg    lp_0_vld_reg;
reg    lp_0_ack_out;
reg   [7:0] in_r_0_data_out;
wire    in_r_0_vld_in;
wire    in_r_0_vld_out;
wire    in_r_0_ack_in;
reg    in_r_0_ack_out;
reg   [7:0] in_r_0_payload_A;
reg   [7:0] in_r_0_payload_B;
reg    in_r_0_sel_rd;
reg    in_r_0_sel_wr;
wire    in_r_0_sel;
wire    in_r_0_load_A;
wire    in_r_0_load_B;
reg   [1:0] in_r_0_state;
wire    in_r_0_state_cmp_full;
reg   [31:0] c_1_data_out;
reg    c_1_vld_in;
wire    c_1_vld_out;
wire    c_1_ack_in;
wire    c_1_ack_out;
reg   [31:0] c_1_payload_A;
reg   [31:0] c_1_payload_B;
reg    c_1_sel_rd;
reg    c_1_sel_wr;
wire    c_1_sel;
wire    c_1_load_A;
wire    c_1_load_B;
reg   [1:0] c_1_state;
wire    c_1_state_cmp_full;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
reg    c_TDATA_blk_n;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_11_fu_378_p2;
wire    ap_CS_fsm_state14;
reg   [31:0] lp_read_reg_439;
wire    ap_CS_fsm_state2;
reg   [31:0] ln_read_reg_445;
reg   [31:0] lm_read_reg_452;
wire   [30:0] i_1_fu_227_p2;
reg   [30:0] i_1_reg_461;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_7_cast_fu_237_p3;
reg   [15:0] tmp_7_cast_reg_466;
wire   [0:0] tmp_fu_222_p2;
wire   [30:0] j_1_fu_254_p2;
reg   [30:0] j_1_reg_474;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_9_fu_264_p2;
reg   [15:0] tmp_9_reg_479;
wire   [0:0] tmp_2_fu_249_p2;
wire   [30:0] i_2_fu_282_p2;
reg   [30:0] i_2_reg_487;
wire    ap_CS_fsm_state6;
wire   [15:0] tmp_15_cast1_fu_292_p3;
reg   [15:0] tmp_15_cast1_reg_492;
wire   [0:0] tmp_3_fu_277_p2;
wire   [30:0] j_2_fu_309_p2;
reg   [30:0] j_2_reg_500;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_10_fu_319_p2;
reg   [15:0] tmp_10_reg_505;
wire   [0:0] tmp_s_fu_304_p2;
wire   [30:0] i_3_fu_337_p2;
reg   [30:0] i_3_reg_513;
wire    ap_CS_fsm_state9;
wire   [15:0] tmp_18_cast_fu_347_p3;
reg   [15:0] tmp_18_cast_reg_518;
wire   [0:0] tmp_5_fu_332_p2;
wire   [30:0] j_3_fu_364_p2;
reg   [30:0] j_3_reg_526;
wire    ap_CS_fsm_state10;
wire   [15:0] tmp_14_fu_370_p1;
reg   [15:0] tmp_14_reg_531;
wire   [0:0] tmp_8_fu_359_p2;
wire   [30:0] n_1_fu_383_p2;
reg   [30:0] n_1_reg_539;
reg    ap_block_state11_io;
wire   [7:0] a_q0;
reg   [7:0] a_load_reg_554;
wire    ap_CS_fsm_state12;
wire   [7:0] b_q0;
reg   [7:0] b_load_reg_559;
wire   [31:0] grp_fu_431_p3;
wire    ap_CS_fsm_state13;
reg   [13:0] a_address0;
reg    a_ce0;
reg    a_we0;
reg   [13:0] b_address0;
reg    b_ce0;
reg    b_we0;
reg   [30:0] i_reg_127;
reg   [30:0] j_reg_138;
reg   [30:0] i1_reg_149;
reg   [30:0] j2_reg_160;
reg   [30:0] i3_reg_171;
reg   [30:0] j4_reg_182;
reg   [31:0] sum_reg_193;
reg   [30:0] n_reg_207;
wire   [63:0] tmp_9_cast_fu_269_p1;
wire   [63:0] tmp_16_cast_fu_324_p1;
wire   [63:0] tmp_19_cast_fu_398_p1;
wire   [63:0] tmp_22_cast_fu_420_p1;
wire   [31:0] i_cast_fu_218_p1;
wire   [8:0] tmp_1_fu_233_p1;
wire   [31:0] j_cast_fu_245_p1;
wire   [15:0] tmp_4_fu_260_p1;
wire   [31:0] i1_cast_fu_273_p1;
wire   [8:0] tmp_6_fu_288_p1;
wire   [31:0] j2_cast_fu_300_p1;
wire   [15:0] tmp_7_fu_315_p1;
wire   [31:0] i3_cast_fu_328_p1;
wire   [8:0] tmp_12_fu_343_p1;
wire   [31:0] j4_cast_fu_355_p1;
wire   [31:0] n_cast_fu_374_p1;
wire   [15:0] tmp_15_fu_389_p1;
wire   [15:0] tmp_16_fu_393_p2;
wire   [8:0] tmp_17_fu_403_p1;
wire   [15:0] tmp_21_cast_fu_407_p3;
wire   [15:0] tmp_18_fu_415_p2;
wire   [7:0] grp_fu_431_p0;
wire   [7:0] grp_fu_431_p1;
reg   [13:0] ap_NS_fsm;
wire   [15:0] grp_fu_431_p00;
wire   [15:0] grp_fu_431_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 lm_0_data_reg = 32'd0;
#0 lm_0_vld_reg = 1'b0;
#0 ln_0_data_reg = 32'd0;
#0 ln_0_vld_reg = 1'b0;
#0 lp_0_data_reg = 32'd0;
#0 lp_0_vld_reg = 1'b0;
#0 in_r_0_sel_rd = 1'b0;
#0 in_r_0_sel_wr = 1'b0;
#0 in_r_0_state = 2'd0;
#0 c_1_sel_rd = 1'b0;
#0 c_1_sel_wr = 1'b0;
#0 c_1_state = 2'd0;
end

matrixMul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixMul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .lm(lm),
    .ln(ln),
    .lp(lp)
);

matrixMul_a #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
a_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_address0),
    .ce0(a_ce0),
    .we0(a_we0),
    .d0(in_r_0_data_out),
    .q0(a_q0)
);

matrixMul_a #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
b_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_address0),
    .ce0(b_ce0),
    .we0(b_we0),
    .d0(in_r_0_data_out),
    .q0(b_q0)
);

matrixMul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixMul_mac_mulbkb_U1(
    .din0(grp_fu_431_p0),
    .din1(grp_fu_431_p1),
    .din2(sum_reg_193),
    .dout(grp_fu_431_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_sel_rd <= 1'b0;
    end else begin
        if (((c_1_ack_out == 1'b1) & (c_1_vld_out == 1'b1))) begin
            c_1_sel_rd <= ~c_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_sel_wr <= 1'b0;
    end else begin
        if (((c_1_ack_in == 1'b1) & (c_1_vld_in == 1'b1))) begin
            c_1_sel_wr <= ~c_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        c_1_state <= 2'd0;
    end else begin
        if ((((c_1_vld_in == 1'b0) & (c_1_state == 2'd2)) | ((c_1_vld_in == 1'b0) & (c_1_ack_out == 1'b1) & (c_1_state == 2'd3)))) begin
            c_1_state <= 2'd2;
        end else if ((((c_1_ack_out == 1'b0) & (c_1_state == 2'd1)) | ((c_1_ack_out == 1'b0) & (c_1_vld_in == 1'b1) & (c_1_state == 2'd3)))) begin
            c_1_state <= 2'd1;
        end else if (((~((c_1_vld_in == 1'b0) & (c_1_ack_out == 1'b1)) & ~((c_1_ack_out == 1'b0) & (c_1_vld_in == 1'b1)) & (c_1_state == 2'd3)) | ((c_1_ack_out == 1'b1) & (c_1_state == 2'd1)) | ((c_1_vld_in == 1'b1) & (c_1_state == 2'd2)))) begin
            c_1_state <= 2'd3;
        end else begin
            c_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_sel_rd <= 1'b0;
    end else begin
        if (((in_r_0_ack_out == 1'b1) & (in_r_0_vld_out == 1'b1))) begin
            in_r_0_sel_rd <= ~in_r_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_sel_wr <= 1'b0;
    end else begin
        if (((in_r_0_ack_in == 1'b1) & (in_r_0_vld_in == 1'b1))) begin
            in_r_0_sel_wr <= ~in_r_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_state <= 2'd0;
    end else begin
        if ((((in_r_0_vld_in == 1'b0) & (in_r_0_state == 2'd2)) | ((in_r_0_vld_in == 1'b0) & (in_r_0_ack_out == 1'b1) & (in_r_0_state == 2'd3)))) begin
            in_r_0_state <= 2'd2;
        end else if ((((in_r_0_ack_out == 1'b0) & (in_r_0_state == 2'd1)) | ((in_r_0_ack_out == 1'b0) & (in_r_0_vld_in == 1'b1) & (in_r_0_state == 2'd3)))) begin
            in_r_0_state <= 2'd1;
        end else if (((~((in_r_0_vld_in == 1'b0) & (in_r_0_ack_out == 1'b1)) & ~((in_r_0_ack_out == 1'b0) & (in_r_0_vld_in == 1'b1)) & (in_r_0_state == 2'd3)) | ((in_r_0_ack_out == 1'b1) & (in_r_0_state == 2'd1)) | ((in_r_0_vld_in == 1'b1) & (in_r_0_state == 2'd2)))) begin
            in_r_0_state <= 2'd3;
        end else begin
            in_r_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_222_p2 == 1'd0))) begin
        i1_reg_149 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_304_p2 == 1'd0))) begin
        i1_reg_149 <= i_2_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_277_p2 == 1'd0))) begin
        i3_reg_171 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_8_fu_359_p2 == 1'd0))) begin
        i3_reg_171 <= i_3_reg_513;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_249_p2 == 1'd0))) begin
        i_reg_127 <= i_1_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_127 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_277_p2 == 1'd1))) begin
        j2_reg_160 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (in_r_0_vld_out == 1'b1))) begin
        j2_reg_160 <= j_2_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((c_1_ack_in == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_332_p2 == 1'd1))) begin
            j4_reg_182 <= 31'd0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            j4_reg_182 <= j_3_reg_526;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_222_p2 == 1'd1))) begin
        j_reg_138 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (in_r_0_vld_out == 1'b1))) begin
        j_reg_138 <= j_1_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_8_fu_359_p2 == 1'd1))) begin
        n_reg_207 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        n_reg_207 <= n_1_reg_539;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_8_fu_359_p2 == 1'd1))) begin
        sum_reg_193 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_reg_193 <= grp_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_load_reg_554 <= a_q0;
        b_load_reg_559 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((c_1_load_A == 1'b1)) begin
        c_1_payload_A <= sum_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if ((c_1_load_B == 1'b1)) begin
        c_1_payload_B <= sum_reg_193;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_461 <= i_1_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_487 <= i_2_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1))) begin
        i_3_reg_513 <= i_3_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_r_0_load_A == 1'b1)) begin
        in_r_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_r_0_load_B == 1'b1)) begin
        in_r_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_474 <= j_1_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_500 <= j_2_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_3_reg_526 <= j_3_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lm_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lm_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (lm_0_vld_reg == 1'b1)))) begin
        lm_0_data_reg <= lm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lm_read_reg_452 <= lm_0_data_reg;
        ln_read_reg_445 <= ln_0_data_reg;
        lp_read_reg_439 <= lp_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (ln_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (ln_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (ln_0_vld_reg == 1'b1)))) begin
        ln_0_data_reg <= ln;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lp_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lp_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (lp_0_vld_reg == 1'b1)))) begin
        lp_0_data_reg <= lp;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        n_1_reg_539 <= n_1_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_304_p2 == 1'd1))) begin
        tmp_10_reg_505 <= tmp_10_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_8_fu_359_p2 == 1'd1))) begin
        tmp_14_reg_531 <= tmp_14_fu_370_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_277_p2 == 1'd1))) begin
        tmp_15_cast1_reg_492[15 : 7] <= tmp_15_cast1_fu_292_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd1))) begin
        tmp_18_cast_reg_518[15 : 7] <= tmp_18_cast_fu_347_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_222_p2 == 1'd1))) begin
        tmp_7_cast_reg_466[15 : 7] <= tmp_7_cast_fu_237_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_249_p2 == 1'd1))) begin
        tmp_9_reg_479 <= tmp_9_fu_264_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        a_address0 = tmp_19_cast_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_address0 = tmp_9_cast_fu_269_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state5) & (in_r_0_vld_out == 1'b1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (in_r_0_vld_out == 1'b1))) begin
        a_we0 = 1'b1;
    end else begin
        a_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        b_address0 = tmp_22_cast_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_address0 = tmp_16_cast_fu_324_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == ap_CS_fsm_state8) & (in_r_0_vld_out == 1'b1)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (in_r_0_vld_out == 1'b1))) begin
        b_we0 = 1'b1;
    end else begin
        b_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((c_1_sel == 1'b1)) begin
        c_1_data_out = c_1_payload_B;
    end else begin
        c_1_data_out = c_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11) & (tmp_11_fu_378_p2 == 1'd0))) begin
        c_1_vld_in = 1'b1;
    end else begin
        c_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b1 == ap_CS_fsm_state11) & (tmp_11_fu_378_p2 == 1'd0)))) begin
        c_TDATA_blk_n = c_1_state[1'd1];
    end else begin
        c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (in_r_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (in_r_0_vld_out == 1'b1)))) begin
        in_r_0_ack_out = 1'b1;
    end else begin
        in_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_r_0_sel == 1'b1)) begin
        in_r_0_data_out = in_r_0_payload_B;
    end else begin
        in_r_0_data_out = in_r_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        in_r_TDATA_blk_n = in_r_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
        lm_0_ack_out = 1'b1;
    end else begin
        lm_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
        ln_0_ack_out = 1'b1;
    end else begin
        ln_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
        lp_0_ack_out = 1'b1;
    end else begin
        lp_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_222_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_249_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (in_r_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_277_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_304_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (in_r_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state9) & (c_1_ack_in == 1'b1) & (tmp_5_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_8_fu_359_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11) & (tmp_11_fu_378_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11) & (tmp_11_fu_378_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (c_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_io = ((c_1_ack_in == 1'b0) & (tmp_11_fu_378_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_ack_in = c_1_state[1'd1];

assign c_1_ack_out = c_TREADY;

assign c_1_load_A = (~c_1_sel_wr & c_1_state_cmp_full);

assign c_1_load_B = (c_1_state_cmp_full & c_1_sel_wr);

assign c_1_sel = c_1_sel_rd;

assign c_1_state_cmp_full = ((c_1_state != 2'd1) ? 1'b1 : 1'b0);

assign c_1_vld_out = c_1_state[1'd0];

assign c_TDATA = c_1_data_out;

assign c_TVALID = c_1_state[1'd0];

assign grp_fu_431_p0 = grp_fu_431_p00;

assign grp_fu_431_p00 = b_load_reg_559;

assign grp_fu_431_p1 = grp_fu_431_p10;

assign grp_fu_431_p10 = a_load_reg_554;

assign i1_cast_fu_273_p1 = i1_reg_149;

assign i3_cast_fu_328_p1 = i3_reg_171;

assign i_1_fu_227_p2 = (i_reg_127 + 31'd1);

assign i_2_fu_282_p2 = (i1_reg_149 + 31'd1);

assign i_3_fu_337_p2 = (i3_reg_171 + 31'd1);

assign i_cast_fu_218_p1 = i_reg_127;

assign in_r_0_ack_in = in_r_0_state[1'd1];

assign in_r_0_load_A = (in_r_0_state_cmp_full & ~in_r_0_sel_wr);

assign in_r_0_load_B = (in_r_0_state_cmp_full & in_r_0_sel_wr);

assign in_r_0_sel = in_r_0_sel_rd;

assign in_r_0_state_cmp_full = ((in_r_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_r_0_vld_in = in_r_TVALID;

assign in_r_0_vld_out = in_r_0_state[1'd0];

assign in_r_TREADY = in_r_0_state[1'd1];

assign j2_cast_fu_300_p1 = j2_reg_160;

assign j4_cast_fu_355_p1 = j4_reg_182;

assign j_1_fu_254_p2 = (j_reg_138 + 31'd1);

assign j_2_fu_309_p2 = (j2_reg_160 + 31'd1);

assign j_3_fu_364_p2 = (j4_reg_182 + 31'd1);

assign j_cast_fu_245_p1 = j_reg_138;

assign n_1_fu_383_p2 = (n_reg_207 + 31'd1);

assign n_cast_fu_374_p1 = n_reg_207;

assign tmp_10_fu_319_p2 = (tmp_15_cast1_reg_492 + tmp_7_fu_315_p1);

assign tmp_11_fu_378_p2 = (($signed(n_cast_fu_374_p1) < $signed(ln_read_reg_445)) ? 1'b1 : 1'b0);

assign tmp_12_fu_343_p1 = i3_reg_171[8:0];

assign tmp_14_fu_370_p1 = j4_reg_182[15:0];

assign tmp_15_cast1_fu_292_p3 = {{tmp_6_fu_288_p1}, {7'd0}};

assign tmp_15_fu_389_p1 = n_reg_207[15:0];

assign tmp_16_cast_fu_324_p1 = tmp_10_reg_505;

assign tmp_16_fu_393_p2 = (tmp_18_cast_reg_518 + tmp_15_fu_389_p1);

assign tmp_17_fu_403_p1 = n_reg_207[8:0];

assign tmp_18_cast_fu_347_p3 = {{tmp_12_fu_343_p1}, {7'd0}};

assign tmp_18_fu_415_p2 = (tmp_21_cast_fu_407_p3 + tmp_14_reg_531);

assign tmp_19_cast_fu_398_p1 = tmp_16_fu_393_p2;

assign tmp_1_fu_233_p1 = i_reg_127[8:0];

assign tmp_21_cast_fu_407_p3 = {{tmp_17_fu_403_p1}, {7'd0}};

assign tmp_22_cast_fu_420_p1 = tmp_18_fu_415_p2;

assign tmp_2_fu_249_p2 = (($signed(j_cast_fu_245_p1) < $signed(ln_read_reg_445)) ? 1'b1 : 1'b0);

assign tmp_3_fu_277_p2 = (($signed(i1_cast_fu_273_p1) < $signed(ln_read_reg_445)) ? 1'b1 : 1'b0);

assign tmp_4_fu_260_p1 = j_reg_138[15:0];

assign tmp_5_fu_332_p2 = (($signed(i3_cast_fu_328_p1) < $signed(lm_read_reg_452)) ? 1'b1 : 1'b0);

assign tmp_6_fu_288_p1 = i1_reg_149[8:0];

assign tmp_7_cast_fu_237_p3 = {{tmp_1_fu_233_p1}, {7'd0}};

assign tmp_7_fu_315_p1 = j2_reg_160[15:0];

assign tmp_8_fu_359_p2 = (($signed(j4_cast_fu_355_p1) < $signed(lp_read_reg_439)) ? 1'b1 : 1'b0);

assign tmp_9_cast_fu_269_p1 = tmp_9_reg_479;

assign tmp_9_fu_264_p2 = (tmp_7_cast_reg_466 + tmp_4_fu_260_p1);

assign tmp_fu_222_p2 = (($signed(i_cast_fu_218_p1) < $signed(lm_read_reg_452)) ? 1'b1 : 1'b0);

assign tmp_s_fu_304_p2 = (($signed(j2_cast_fu_300_p1) < $signed(lp_read_reg_439)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_466[6:0] <= 7'b0000000;
    tmp_15_cast1_reg_492[6:0] <= 7'b0000000;
    tmp_18_cast_reg_518[6:0] <= 7'b0000000;
end

endmodule //matrixMul
