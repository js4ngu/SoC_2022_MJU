// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "adder5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic adder5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic adder5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> adder5::ap_ST_fsm_state1 = "1";
const sc_lv<4> adder5::ap_ST_fsm_state2 = "10";
const sc_lv<4> adder5::ap_ST_fsm_state3 = "100";
const sc_lv<4> adder5::ap_ST_fsm_state4 = "1000";
const sc_lv<32> adder5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> adder5::ap_const_lv1_0 = "0";
const sc_lv<1> adder5::ap_const_lv1_1 = "1";
const sc_lv<2> adder5::ap_const_lv2_0 = "00";
const sc_lv<2> adder5::ap_const_lv2_2 = "10";
const sc_lv<2> adder5::ap_const_lv2_3 = "11";
const sc_lv<2> adder5::ap_const_lv2_1 = "1";
const sc_lv<32> adder5::ap_const_lv32_2 = "10";
const sc_lv<32> adder5::ap_const_lv32_3 = "11";
const sc_lv<32> adder5::ap_const_lv32_1 = "1";
const sc_lv<6> adder5::ap_const_lv6_0 = "000000";
const sc_lv<6> adder5::ap_const_lv6_32 = "110010";
const sc_lv<6> adder5::ap_const_lv6_1 = "1";
const sc_lv<32> adder5::ap_const_lv32_5 = "101";
const bool adder5::ap_const_boolean_1 = true;

adder5::adder5(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_0_ack_in);
    sensitive << ( A_0_state );

    SC_METHOD(thread_A_0_ack_out);
    sensitive << ( A_0_vld_out );
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_A_0_data_out);
    sensitive << ( A_0_payload_A );
    sensitive << ( A_0_payload_B );
    sensitive << ( A_0_sel );

    SC_METHOD(thread_A_0_load_A);
    sensitive << ( A_0_sel_wr );
    sensitive << ( A_0_state_cmp_full );

    SC_METHOD(thread_A_0_load_B);
    sensitive << ( A_0_sel_wr );
    sensitive << ( A_0_state_cmp_full );

    SC_METHOD(thread_A_0_sel);
    sensitive << ( A_0_sel_rd );

    SC_METHOD(thread_A_0_state_cmp_full);
    sensitive << ( A_0_state );

    SC_METHOD(thread_A_0_vld_in);
    sensitive << ( A_TVALID );

    SC_METHOD(thread_A_0_vld_out);
    sensitive << ( A_0_state );

    SC_METHOD(thread_A_TDATA_blk_n);
    sensitive << ( A_0_state );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_A_TREADY);
    sensitive << ( A_0_state );

    SC_METHOD(thread_B_1_ack_in);
    sensitive << ( B_1_state );

    SC_METHOD(thread_B_1_ack_out);
    sensitive << ( B_TREADY );

    SC_METHOD(thread_B_1_data_out);
    sensitive << ( B_1_payload_A );
    sensitive << ( B_1_payload_B );
    sensitive << ( B_1_sel );

    SC_METHOD(thread_B_1_load_A);
    sensitive << ( B_1_sel_wr );
    sensitive << ( B_1_state_cmp_full );

    SC_METHOD(thread_B_1_load_B);
    sensitive << ( B_1_sel_wr );
    sensitive << ( B_1_state_cmp_full );

    SC_METHOD(thread_B_1_sel);
    sensitive << ( B_1_sel_rd );

    SC_METHOD(thread_B_1_state_cmp_full);
    sensitive << ( B_1_state );

    SC_METHOD(thread_B_1_vld_in);
    sensitive << ( A_0_vld_out );
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_B_1_vld_out);
    sensitive << ( B_1_state );

    SC_METHOD(thread_B_TDATA);
    sensitive << ( B_1_data_out );

    SC_METHOD(thread_B_TDATA_blk_n);
    sensitive << ( B_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_TVALID);
    sensitive << ( B_1_state );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_62_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_62_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_exitcond_fu_62_p2);
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_51 );

    SC_METHOD(thread_i_1_fu_68_p2);
    sensitive << ( i_reg_51 );

    SC_METHOD(thread_tmp_1_fu_74_p2);
    sensitive << ( A_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_0_vld_out );
    sensitive << ( B_1_ack_in );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_62_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    A_0_sel_rd = SC_LOGIC_0;
    A_0_sel_wr = SC_LOGIC_0;
    A_0_state = "00";
    B_1_sel_rd = SC_LOGIC_0;
    B_1_sel_wr = SC_LOGIC_0;
    B_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "adder5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_TDATA, "(port)A_TDATA");
    sc_trace(mVcdFile, A_TVALID, "(port)A_TVALID");
    sc_trace(mVcdFile, A_TREADY, "(port)A_TREADY");
    sc_trace(mVcdFile, B_TDATA, "(port)B_TDATA");
    sc_trace(mVcdFile, B_TVALID, "(port)B_TVALID");
    sc_trace(mVcdFile, B_TREADY, "(port)B_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_0_data_out, "A_0_data_out");
    sc_trace(mVcdFile, A_0_vld_in, "A_0_vld_in");
    sc_trace(mVcdFile, A_0_vld_out, "A_0_vld_out");
    sc_trace(mVcdFile, A_0_ack_in, "A_0_ack_in");
    sc_trace(mVcdFile, A_0_ack_out, "A_0_ack_out");
    sc_trace(mVcdFile, A_0_payload_A, "A_0_payload_A");
    sc_trace(mVcdFile, A_0_payload_B, "A_0_payload_B");
    sc_trace(mVcdFile, A_0_sel_rd, "A_0_sel_rd");
    sc_trace(mVcdFile, A_0_sel_wr, "A_0_sel_wr");
    sc_trace(mVcdFile, A_0_sel, "A_0_sel");
    sc_trace(mVcdFile, A_0_load_A, "A_0_load_A");
    sc_trace(mVcdFile, A_0_load_B, "A_0_load_B");
    sc_trace(mVcdFile, A_0_state, "A_0_state");
    sc_trace(mVcdFile, A_0_state_cmp_full, "A_0_state_cmp_full");
    sc_trace(mVcdFile, B_1_data_out, "B_1_data_out");
    sc_trace(mVcdFile, B_1_vld_in, "B_1_vld_in");
    sc_trace(mVcdFile, B_1_vld_out, "B_1_vld_out");
    sc_trace(mVcdFile, B_1_ack_in, "B_1_ack_in");
    sc_trace(mVcdFile, B_1_ack_out, "B_1_ack_out");
    sc_trace(mVcdFile, B_1_payload_A, "B_1_payload_A");
    sc_trace(mVcdFile, B_1_payload_B, "B_1_payload_B");
    sc_trace(mVcdFile, B_1_sel_rd, "B_1_sel_rd");
    sc_trace(mVcdFile, B_1_sel_wr, "B_1_sel_wr");
    sc_trace(mVcdFile, B_1_sel, "B_1_sel");
    sc_trace(mVcdFile, B_1_load_A, "B_1_load_A");
    sc_trace(mVcdFile, B_1_load_B, "B_1_load_B");
    sc_trace(mVcdFile, B_1_state, "B_1_state");
    sc_trace(mVcdFile, B_1_state_cmp_full, "B_1_state_cmp_full");
    sc_trace(mVcdFile, A_TDATA_blk_n, "A_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, B_TDATA_blk_n, "B_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_1_fu_68_p2, "i_1_fu_68_p2");
    sc_trace(mVcdFile, i_1_reg_84, "i_1_reg_84");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_74_p2, "tmp_1_fu_74_p2");
    sc_trace(mVcdFile, i_reg_51, "i_reg_51");
    sc_trace(mVcdFile, exitcond_fu_62_p2, "exitcond_fu_62_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("adder5.hdltvin.dat");
    mHdltvoutHandle.open("adder5.hdltvout.dat");
}

adder5::~adder5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void adder5::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        A_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, A_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, A_0_vld_out.read()))) {
            A_0_sel_rd =  (sc_logic) (~A_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        A_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, A_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, A_0_ack_in.read()))) {
            A_0_sel_wr =  (sc_logic) (~A_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        A_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, A_0_ack_out.read()) && 
              esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_in.read()) && 
              esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_2)))) {
            A_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, A_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, A_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, A_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_1)))) {
            A_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, A_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, A_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(A_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, A_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, A_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, A_0_ack_out.read()))))) {
            A_0_state = ap_const_lv2_3;
        } else {
            A_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        B_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, B_1_vld_out.read()))) {
            B_1_sel_rd =  (sc_logic) (~B_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        B_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, B_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
            B_1_sel_wr =  (sc_logic) (~B_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        B_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, B_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, B_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, B_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, B_1_state.read())))) {
            B_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, B_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, B_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, B_1_state.read())))) {
            B_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, B_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, B_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, B_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, B_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, B_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, B_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_out.read()))))) {
            B_1_state = ap_const_lv2_3;
        } else {
            B_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
        i_reg_51 = i_1_reg_84.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_51 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, A_0_load_A.read())) {
        A_0_payload_A = A_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, A_0_load_B.read())) {
        A_0_payload_B = A_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, B_1_load_A.read())) {
        B_1_payload_A = tmp_1_fu_74_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, B_1_load_B.read())) {
        B_1_payload_B = tmp_1_fu_74_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
        i_1_reg_84 = i_1_fu_68_p2.read();
    }
}

void adder5::thread_A_0_ack_in() {
    A_0_ack_in = A_0_state.read()[1];
}

void adder5::thread_A_0_ack_out() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        A_0_ack_out = ap_const_logic_1;
    } else {
        A_0_ack_out = ap_const_logic_0;
    }
}

void adder5::thread_A_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, A_0_sel.read())) {
        A_0_data_out = A_0_payload_B.read();
    } else {
        A_0_data_out = A_0_payload_A.read();
    }
}

void adder5::thread_A_0_load_A() {
    A_0_load_A = (A_0_state_cmp_full.read() & ~A_0_sel_wr.read());
}

void adder5::thread_A_0_load_B() {
    A_0_load_B = (A_0_sel_wr.read() & A_0_state_cmp_full.read());
}

void adder5::thread_A_0_sel() {
    A_0_sel = A_0_sel_rd.read();
}

void adder5::thread_A_0_state_cmp_full() {
    A_0_state_cmp_full =  (sc_logic) ((!A_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(A_0_state.read() != ap_const_lv2_1))[0];
}

void adder5::thread_A_0_vld_in() {
    A_0_vld_in = A_TVALID.read();
}

void adder5::thread_A_0_vld_out() {
    A_0_vld_out = A_0_state.read()[0];
}

void adder5::thread_A_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_TDATA_blk_n = A_0_state.read()[0];
    } else {
        A_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder5::thread_A_TREADY() {
    A_TREADY = A_0_state.read()[1];
}

void adder5::thread_B_1_ack_in() {
    B_1_ack_in = B_1_state.read()[1];
}

void adder5::thread_B_1_ack_out() {
    B_1_ack_out = B_TREADY.read();
}

void adder5::thread_B_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, B_1_sel.read())) {
        B_1_data_out = B_1_payload_B.read();
    } else {
        B_1_data_out = B_1_payload_A.read();
    }
}

void adder5::thread_B_1_load_A() {
    B_1_load_A = (B_1_state_cmp_full.read() & ~B_1_sel_wr.read());
}

void adder5::thread_B_1_load_B() {
    B_1_load_B = (B_1_sel_wr.read() & B_1_state_cmp_full.read());
}

void adder5::thread_B_1_sel() {
    B_1_sel = B_1_sel_rd.read();
}

void adder5::thread_B_1_state_cmp_full() {
    B_1_state_cmp_full =  (sc_logic) ((!B_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(B_1_state.read() != ap_const_lv2_1))[0];
}

void adder5::thread_B_1_vld_in() {
    if ((!(esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        B_1_vld_in = ap_const_logic_1;
    } else {
        B_1_vld_in = ap_const_logic_0;
    }
}

void adder5::thread_B_1_vld_out() {
    B_1_vld_out = B_1_state.read()[0];
}

void adder5::thread_B_TDATA() {
    B_TDATA = B_1_data_out.read();
}

void adder5::thread_B_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        B_TDATA_blk_n = B_1_state.read()[1];
    } else {
        B_TDATA_blk_n = ap_const_logic_1;
    }
}

void adder5::thread_B_TVALID() {
    B_TVALID = B_1_state.read()[0];
}

void adder5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void adder5::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void adder5::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void adder5::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void adder5::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond_fu_62_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void adder5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void adder5::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_62_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void adder5::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void adder5::thread_exitcond_fu_62_p2() {
    exitcond_fu_62_p2 = (!i_reg_51.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_51.read() == ap_const_lv6_32);
}

void adder5::thread_i_1_fu_68_p2() {
    i_1_fu_68_p2 = (!i_reg_51.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_51.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void adder5::thread_tmp_1_fu_74_p2() {
    tmp_1_fu_74_p2 = (!A_0_data_out.read().is_01() || !ap_const_lv32_5.is_01())? sc_lv<32>(): (sc_biguint<32>(A_0_data_out.read()) + sc_biguint<32>(ap_const_lv32_5));
}

void adder5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_62_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(exitcond_fu_62_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_0, A_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, B_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_logic_1, B_1_ack_in.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void adder5::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TDATA\" :  \"" << A_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_TVALID\" :  \"" << A_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_TREADY\" :  \"" << A_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TDATA\" :  \"" << B_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_TVALID\" :  \"" << B_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_TREADY\" :  \"" << B_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

