// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_1D_rev2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=34499,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=123,HLS_SYN_LUT=462,HLS_VERSION=2018_2}" *)

module matrixmul_1D_rev2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] Input_r_address0;
output   Input_r_ce0;
input  [7:0] Input_r_q0;
output  [13:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] Input_r_address0;
reg Input_r_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] indvarinc_fu_280_p2;
wire    ap_CS_fsm_state2;
wire   [13:0] indvarinc1_fu_297_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] i_1_fu_320_p2;
reg   [1:0] i_1_reg_553;
wire    ap_CS_fsm_state4;
wire   [1:0] j_1_fu_332_p2;
reg   [1:0] j_1_reg_561;
wire    ap_CS_fsm_state5;
wire   [63:0] tmp_8_fu_348_p1;
reg   [63:0] tmp_8_reg_566;
wire   [0:0] exitcond5_fu_326_p2;
wire   [1:0] i_2_fu_359_p2;
reg   [1:0] i_2_reg_579;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp_5_fu_365_p3;
reg   [8:0] tmp_5_reg_584;
wire   [0:0] exitcond4_fu_353_p2;
wire   [1:0] j_2_fu_379_p2;
reg   [1:0] j_2_reg_592;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond3_fu_373_p2;
wire   [3:0] i_3_fu_428_p2;
reg   [3:0] i_3_reg_605;
wire    ap_CS_fsm_state10;
wire   [3:0] j_3_fu_440_p2;
reg   [3:0] j_3_reg_613;
wire    ap_CS_fsm_state11;
wire   [3:0] k_1_fu_452_p2;
reg   [3:0] k_1_reg_621;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond7_fu_446_p2;
wire   [7:0] A_q0;
reg   [7:0] A_load_reg_636;
wire    ap_CS_fsm_state13;
wire   [7:0] B_q0;
reg   [7:0] B_load_reg_641;
wire   [18:0] grp_fu_526_p3;
wire    ap_CS_fsm_state14;
reg   [13:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [7:0] A_d0;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [7:0] B_d0;
reg   [13:0] invdar_reg_164;
wire   [0:0] tmp_1_fu_291_p2;
reg   [13:0] invdar1_reg_175;
wire   [0:0] tmp_3_fu_308_p2;
reg   [1:0] i_reg_186;
reg   [1:0] j_reg_198;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond6_fu_314_p2;
reg   [1:0] i1_reg_209;
reg   [1:0] j2_reg_221;
wire    ap_CS_fsm_state9;
reg   [3:0] i6_reg_233;
wire   [0:0] exitcond9_fu_434_p2;
reg   [3:0] j7_reg_245;
wire   [0:0] exitcond_fu_422_p2;
reg   [18:0] sum_reg_257;
reg   [3:0] k_reg_269;
wire   [63:0] tmp_fu_286_p1;
wire   [63:0] tmp_2_fu_303_p1;
wire   [63:0] tmp_s_fu_402_p1;
wire   [63:0] tmp_6_fu_417_p1;
wire   [63:0] tmp_15_fu_472_p1;
wire   [63:0] tmp_18_fu_491_p1;
wire   [63:0] tmp_12_fu_515_p1;
wire   [8:0] tmp_7_fu_338_p4;
wire   [7:0] tmp1_fu_385_p3;
wire   [8:0] tmp1_cast_fu_393_p1;
wire   [8:0] tmp_9_fu_397_p2;
wire   [8:0] tmp_4_fu_407_p4;
wire   [2:0] tmp_13_fu_458_p1;
wire   [9:0] tmp_14_fu_462_p4;
wire   [2:0] tmp_16_fu_477_p1;
wire   [9:0] tmp_17_fu_481_p4;
wire   [2:0] tmp_10_fu_501_p1;
wire   [9:0] tmp_11_fu_505_p4;
wire   [7:0] grp_fu_526_p0;
wire   [7:0] grp_fu_526_p1;
reg   [13:0] ap_NS_fsm;
wire   [15:0] grp_fu_526_p00;
wire   [15:0] grp_fu_526_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

matrixmul_1D_rev2_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(A_d0),
    .q0(A_q0)
);

matrixmul_1D_rev2_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(B_d0),
    .q0(B_q0)
);

matrixmul_1D_rev2bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
matrixmul_1D_rev2bkb_U1(
    .din0(grp_fu_526_p0),
    .din1(grp_fu_526_p1),
    .din2(sum_reg_257),
    .dout(grp_fu_526_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_314_p2 == 1'd1))) begin
        i1_reg_209 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_373_p2 == 1'd1))) begin
        i1_reg_209 <= i_2_reg_579;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_353_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i6_reg_233 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond9_fu_434_p2 == 1'd1))) begin
        i6_reg_233 <= i_3_reg_605;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_308_p2 == 1'd1))) begin
        i_reg_186 <= 2'd0;
    end else if (((exitcond5_fu_326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_186 <= i_1_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_291_p2 == 1'd1))) begin
        invdar1_reg_175 <= 14'd0;
    end else if (((tmp_3_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        invdar1_reg_175 <= indvarinc1_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_164 <= indvarinc_fu_280_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_164 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        j2_reg_221 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        j2_reg_221 <= j_2_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        j7_reg_245 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_446_p2 == 1'd1))) begin
        j7_reg_245 <= j_3_reg_613;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_314_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_198 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_198 <= j_1_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        k_reg_269 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        k_reg_269 <= k_1_reg_621;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        sum_reg_257 <= 19'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sum_reg_257 <= grp_fu_526_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_load_reg_636 <= A_q0;
        B_load_reg_641 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_553 <= i_1_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_579 <= i_2_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_605 <= i_3_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_561 <= j_1_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_2_reg_592 <= j_2_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_3_reg_613 <= j_3_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_1_reg_621 <= k_1_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_5_reg_584[8 : 7] <= tmp_5_fu_365_p3[8 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_8_reg_566[1 : 0] <= tmp_8_fu_348_p1[1 : 0];
tmp_8_reg_566[8 : 7] <= tmp_8_fu_348_p1[8 : 7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_446_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address0 = tmp_15_fu_472_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = tmp_8_reg_566;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = tmp_fu_286_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_d0 = Input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_d0 = 8'd0;
    end else begin
        A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        B_address0 = tmp_18_fu_491_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_address0 = tmp_6_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_address0 = tmp_2_fu_303_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_d0 = Input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        B_d0 = 8'd0;
    end else begin
        B_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Input_r_address0 = tmp_s_fu_402_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Input_r_address0 = tmp_8_fu_348_p1;
    end else begin
        Input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        Input_r_ce0 = 1'b1;
    end else begin
        Input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_422_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_422_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_3_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond6_fu_314_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond5_fu_326_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond4_fu_353_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond3_fu_373_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_422_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond9_fu_434_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond7_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = tmp_12_fu_515_p1;

assign AB_d0 = sum_reg_257;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond3_fu_373_p2 = ((j2_reg_221 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_353_p2 = ((i1_reg_209 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond5_fu_326_p2 = ((j_reg_198 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_314_p2 = ((i_reg_186 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond7_fu_446_p2 = ((k_reg_269 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_434_p2 = ((j7_reg_245 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_422_p2 = ((i6_reg_233 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_526_p0 = grp_fu_526_p00;

assign grp_fu_526_p00 = A_load_reg_636;

assign grp_fu_526_p1 = grp_fu_526_p10;

assign grp_fu_526_p10 = B_load_reg_641;

assign i_1_fu_320_p2 = (i_reg_186 + 2'd1);

assign i_2_fu_359_p2 = (i1_reg_209 + 2'd1);

assign i_3_fu_428_p2 = (i6_reg_233 + 4'd1);

assign indvarinc1_fu_297_p2 = (invdar1_reg_175 + 14'd1);

assign indvarinc_fu_280_p2 = (invdar_reg_164 + 14'd1);

assign j_1_fu_332_p2 = (j_reg_198 + 2'd1);

assign j_2_fu_379_p2 = (j2_reg_221 + 2'd1);

assign j_3_fu_440_p2 = (j7_reg_245 + 4'd1);

assign k_1_fu_452_p2 = (k_reg_269 + 4'd1);

assign tmp1_cast_fu_393_p1 = tmp1_fu_385_p3;

assign tmp1_fu_385_p3 = {{6'd32}, {j2_reg_221}};

assign tmp_10_fu_501_p1 = i6_reg_233[2:0];

assign tmp_11_fu_505_p4 = {{{tmp_10_fu_501_p1}, {3'd0}}, {j7_reg_245}};

assign tmp_12_fu_515_p1 = tmp_11_fu_505_p4;

assign tmp_13_fu_458_p1 = i6_reg_233[2:0];

assign tmp_14_fu_462_p4 = {{{tmp_13_fu_458_p1}, {3'd0}}, {k_reg_269}};

assign tmp_15_fu_472_p1 = tmp_14_fu_462_p4;

assign tmp_16_fu_477_p1 = k_reg_269[2:0];

assign tmp_17_fu_481_p4 = {{{tmp_16_fu_477_p1}, {3'd0}}, {j7_reg_245}};

assign tmp_18_fu_491_p1 = tmp_17_fu_481_p4;

assign tmp_1_fu_291_p2 = ((invdar_reg_164 == 14'd16383) ? 1'b1 : 1'b0);

assign tmp_2_fu_303_p1 = invdar1_reg_175;

assign tmp_3_fu_308_p2 = ((invdar1_reg_175 == 14'd16383) ? 1'b1 : 1'b0);

assign tmp_4_fu_407_p4 = {{{i1_reg_209}, {5'd0}}, {j2_reg_221}};

assign tmp_5_fu_365_p3 = {{i1_reg_209}, {7'd0}};

assign tmp_6_fu_417_p1 = tmp_4_fu_407_p4;

assign tmp_7_fu_338_p4 = {{{i_reg_186}, {5'd0}}, {j_reg_198}};

assign tmp_8_fu_348_p1 = tmp_7_fu_338_p4;

assign tmp_9_fu_397_p2 = (tmp1_cast_fu_393_p1 + tmp_5_reg_584);

assign tmp_fu_286_p1 = invdar_reg_164;

assign tmp_s_fu_402_p1 = tmp_9_fu_397_p2;

always @ (posedge ap_clk) begin
    tmp_8_reg_566[6:2] <= 5'b00000;
    tmp_8_reg_566[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_584[6:0] <= 7'b0000000;
end

endmodule //matrixmul_1D_rev2
