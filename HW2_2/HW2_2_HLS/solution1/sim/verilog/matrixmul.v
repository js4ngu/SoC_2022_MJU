// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=1731,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=99,HLS_SYN_LUT=317,HLS_VERSION=2018_2}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_address0,
        Input_r_ce0,
        Input_r_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] Input_r_address0;
output   Input_r_ce0;
input  [7:0] Input_r_q0;
output  [13:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] Input_r_address0;
reg Input_r_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_1_fu_227_p2;
reg   [1:0] i_1_reg_419;
wire    ap_CS_fsm_state2;
wire   [1:0] j_1_fu_239_p2;
reg   [1:0] j_1_reg_427;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_1_fu_255_p1;
reg   [63:0] tmp_1_reg_432;
wire   [0:0] exitcond5_fu_233_p2;
wire   [1:0] i_2_fu_266_p2;
reg   [1:0] i_2_reg_445;
wire    ap_CS_fsm_state5;
wire   [1:0] j_2_fu_278_p2;
reg   [1:0] j_2_reg_453;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond3_fu_272_p2;
wire   [3:0] i_3_fu_322_p2;
reg   [3:0] i_3_reg_466;
wire    ap_CS_fsm_state8;
wire   [3:0] j_3_fu_334_p2;
reg   [3:0] j_3_reg_474;
wire    ap_CS_fsm_state9;
reg   [13:0] AB_addr_reg_479;
wire   [0:0] exitcond8_fu_328_p2;
wire   [3:0] k_1_fu_361_p2;
reg   [3:0] k_1_reg_487;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond7_fu_355_p2;
wire   [7:0] A_q0;
reg   [7:0] A_load_reg_502;
wire    ap_CS_fsm_state11;
wire   [7:0] B_q0;
reg   [7:0] B_load_reg_507;
wire   [18:0] grp_fu_408_p3;
wire    ap_CS_fsm_state12;
reg   [13:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [1:0] i_reg_127;
reg   [1:0] j_reg_139;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_221_p2;
reg   [1:0] i1_reg_150;
reg   [1:0] j2_reg_162;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond4_fu_260_p2;
reg   [3:0] i6_reg_174;
reg   [3:0] j7_reg_186;
wire   [0:0] exitcond_fu_316_p2;
reg   [18:0] sum_reg_198;
reg   [3:0] k_reg_210;
wire   [63:0] tmp_3_fu_296_p1;
wire   [63:0] tmp_5_fu_311_p1;
wire   [63:0] tmp_8_fu_350_p1;
wire   [63:0] tmp_s_fu_377_p1;
wire   [63:0] tmp_11_fu_392_p1;
wire   [8:0] tmp_fu_245_p4;
wire   [14:0] tmp_2_fu_284_p5;
wire   [8:0] tmp_4_fu_301_p4;
wire   [10:0] tmp_7_fu_340_p4;
wire   [10:0] tmp_9_fu_367_p4;
wire   [10:0] tmp_10_fu_382_p4;
wire   [7:0] grp_fu_408_p0;
wire   [7:0] grp_fu_408_p1;
reg   [11:0] ap_NS_fsm;
wire   [15:0] grp_fu_408_p00;
wire   [15:0] grp_fu_408_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(Input_r_q0),
    .q0(A_q0)
);

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(Input_r_q0),
    .q0(B_q0)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
matrixmul_mac_mulbkb_U1(
    .din0(grp_fu_408_p0),
    .din1(grp_fu_408_p1),
    .din2(sum_reg_198),
    .dout(grp_fu_408_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_221_p2 == 1'd1))) begin
        i1_reg_150 <= 2'd0;
    end else if (((exitcond3_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i1_reg_150 <= i_2_reg_445;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_fu_260_p2 == 1'd1))) begin
        i6_reg_174 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_328_p2 == 1'd1))) begin
        i6_reg_174 <= i_3_reg_466;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_127 <= i_1_reg_419;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_127 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j2_reg_162 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j2_reg_162 <= j_2_reg_453;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_316_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j7_reg_186 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_355_p2 == 1'd1))) begin
        j7_reg_186 <= j_3_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_221_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_139 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_139 <= j_1_reg_427;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_reg_210 <= k_1_reg_487;
    end else if (((exitcond8_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        k_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sum_reg_198 <= grp_fu_408_p3;
    end else if (((exitcond8_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        sum_reg_198 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_328_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        AB_addr_reg_479[3 : 0] <= tmp_8_fu_350_p1[3 : 0];
AB_addr_reg_479[10 : 7] <= tmp_8_fu_350_p1[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        A_load_reg_502 <= A_q0;
        B_load_reg_507 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_419 <= i_1_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_445 <= i_2_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_466 <= i_3_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_427 <= j_1_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_453 <= j_2_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_3_reg_474 <= j_3_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_1_reg_487 <= k_1_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_233_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_432[1 : 0] <= tmp_1_fu_255_p1[1 : 0];
tmp_1_reg_432[8 : 7] <= tmp_1_fu_255_p1[8 : 7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_355_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = tmp_s_fu_377_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = tmp_1_reg_432;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = tmp_11_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        B_address0 = tmp_5_fu_311_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Input_r_address0 = tmp_3_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Input_r_address0 = tmp_1_fu_255_p1;
    end else begin
        Input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        Input_r_ce0 = 1'b1;
    end else begin
        Input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_316_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_316_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond6_fu_221_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond5_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond4_fu_260_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond3_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_355_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = AB_addr_reg_479;

assign AB_d0 = sum_reg_198;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond3_fu_272_p2 = ((j2_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_260_p2 = ((i1_reg_150 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond5_fu_233_p2 = ((j_reg_139 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_221_p2 = ((i_reg_127 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond7_fu_355_p2 = ((k_reg_210 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond8_fu_328_p2 = ((j7_reg_186 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_316_p2 = ((i6_reg_174 == 4'd8) ? 1'b1 : 1'b0);

assign grp_fu_408_p0 = grp_fu_408_p00;

assign grp_fu_408_p00 = A_load_reg_502;

assign grp_fu_408_p1 = grp_fu_408_p10;

assign grp_fu_408_p10 = B_load_reg_507;

assign i_1_fu_227_p2 = (i_reg_127 + 2'd1);

assign i_2_fu_266_p2 = (i1_reg_150 + 2'd1);

assign i_3_fu_322_p2 = (i6_reg_174 + 4'd1);

assign j_1_fu_239_p2 = (j_reg_139 + 2'd1);

assign j_2_fu_278_p2 = (j2_reg_162 + 2'd1);

assign j_3_fu_334_p2 = (j7_reg_186 + 4'd1);

assign k_1_fu_361_p2 = (k_reg_210 + 4'd1);

assign tmp_10_fu_382_p4 = {{{k_reg_210}, {3'd0}}, {j7_reg_186}};

assign tmp_11_fu_392_p1 = tmp_10_fu_382_p4;

assign tmp_1_fu_255_p1 = tmp_fu_245_p4;

assign tmp_2_fu_284_p5 = {{{{{{6'd32}, {i1_reg_150}}}, {5'd0}}}, {j2_reg_162}};

assign tmp_3_fu_296_p1 = tmp_2_fu_284_p5;

assign tmp_4_fu_301_p4 = {{{i1_reg_150}, {5'd0}}, {j2_reg_162}};

assign tmp_5_fu_311_p1 = tmp_4_fu_301_p4;

assign tmp_7_fu_340_p4 = {{{i6_reg_174}, {3'd0}}, {j7_reg_186}};

assign tmp_8_fu_350_p1 = tmp_7_fu_340_p4;

assign tmp_9_fu_367_p4 = {{{i6_reg_174}, {3'd0}}, {k_reg_210}};

assign tmp_fu_245_p4 = {{{i_reg_127}, {5'd0}}, {j_reg_139}};

assign tmp_s_fu_377_p1 = tmp_9_fu_367_p4;

always @ (posedge ap_clk) begin
    tmp_1_reg_432[6:2] <= 5'b00000;
    tmp_1_reg_432[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    AB_addr_reg_479[6:4] <= 3'b000;
    AB_addr_reg_479[13:11] <= 3'b000;
end

endmodule //matrixmul
