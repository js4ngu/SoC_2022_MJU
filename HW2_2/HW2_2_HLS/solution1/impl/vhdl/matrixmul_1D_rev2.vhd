-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_1D_rev2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Input_r_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    Input_r_ce0 : OUT STD_LOGIC;
    Input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul_1D_rev2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_1D_rev2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=34499,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=123,HLS_SYN_LUT=462,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_280_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_297_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_553 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_fu_332_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_561 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_8_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_359_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_579 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_5_fu_365_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_584 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_379_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_592 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond3_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_3_fu_440_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal k_1_fu_452_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_621 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond7_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_load_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal B_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_load_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal A_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal B_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal invdar_reg_164 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_175 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond6_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal j2_reg_221 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i6_reg_233 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j7_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_257 : STD_LOGIC_VECTOR (18 downto 0);
    signal k_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_338_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_407_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_462_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_477_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_481_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_501_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_505_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_526_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_526_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_1D_rev2bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component matrixmul_1D_rev2_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    A_U : component matrixmul_1D_rev2_A
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => A_d0,
        q0 => A_q0);

    B_U : component matrixmul_1D_rev2_A
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => B_d0,
        q0 => B_q0);

    matrixmul_1D_rev2bkb_U1 : component matrixmul_1D_rev2bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_526_p0,
        din1 => grp_fu_526_p1,
        din2 => sum_reg_257,
        dout => grp_fu_526_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_314_p2 = ap_const_lv1_1))) then 
                i1_reg_209 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_373_p2 = ap_const_lv1_1))) then 
                i1_reg_209 <= i_2_reg_579;
            end if; 
        end if;
    end process;

    i6_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i6_reg_233 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond9_fu_434_p2 = ap_const_lv1_1))) then 
                i6_reg_233 <= i_3_reg_605;
            end if; 
        end if;
    end process;

    i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_308_p2 = ap_const_lv1_1))) then 
                i_reg_186 <= ap_const_lv2_0;
            elsif (((exitcond5_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_186 <= i_1_reg_553;
            end if; 
        end if;
    end process;

    invdar1_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_291_p2 = ap_const_lv1_1))) then 
                invdar1_reg_175 <= ap_const_lv14_0;
            elsif (((tmp_3_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                invdar1_reg_175 <= indvarinc1_fu_297_p2;
            end if; 
        end if;
    end process;

    invdar_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_164 <= indvarinc_fu_280_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_164 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    j2_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j2_reg_221 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j2_reg_221 <= j_2_reg_592;
            end if; 
        end if;
    end process;

    j7_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j7_reg_245 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_446_p2 = ap_const_lv1_1))) then 
                j7_reg_245 <= j_3_reg_613;
            end if; 
        end if;
    end process;

    j_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_198 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_198 <= j_1_reg_561;
            end if; 
        end if;
    end process;

    k_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_reg_269 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                k_reg_269 <= k_1_reg_621;
            end if; 
        end if;
    end process;

    sum_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                sum_reg_257 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_reg_257 <= grp_fu_526_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                A_load_reg_636 <= A_q0;
                B_load_reg_641 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_553 <= i_1_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_579 <= i_2_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_605 <= i_3_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_561 <= j_1_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                j_2_reg_592 <= j_2_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_3_reg_613 <= j_3_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_1_reg_621 <= k_1_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_5_reg_584(8 downto 7) <= tmp_5_fu_365_p3(8 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_8_reg_566(1 downto 0) <= tmp_8_fu_348_p1(1 downto 0);    tmp_8_reg_566(8 downto 7) <= tmp_8_fu_348_p1(8 downto 7);
            end if;
        end if;
    end process;
    tmp_8_reg_566(6 downto 2) <= "00000";
    tmp_8_reg_566(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_584(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond5_fu_326_p2, ap_CS_fsm_state7, exitcond4_fu_353_p2, ap_CS_fsm_state8, exitcond3_fu_373_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, exitcond7_fu_446_p2, tmp_1_fu_291_p2, tmp_3_fu_308_p2, exitcond6_fu_314_p2, exitcond9_fu_434_p2, exitcond_fu_422_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_291_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_3_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_314_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond5_fu_326_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((exitcond4_fu_353_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond3_fu_373_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_422_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond9_fu_434_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_446_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    AB_address0 <= tmp_12_fu_515_p1(14 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_257),32));

    AB_we0_assign_proc : process(ap_CS_fsm_state12, exitcond7_fu_446_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond7_fu_446_p2 = ap_const_lv1_1))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_address0_assign_proc : process(ap_CS_fsm_state2, tmp_8_reg_566, ap_CS_fsm_state12, ap_CS_fsm_state6, tmp_fu_286_p1, tmp_15_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_address0 <= tmp_15_fu_472_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= tmp_8_reg_566(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= tmp_fu_286_p1(14 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_d0_assign_proc : process(Input_r_q0, ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_d0 <= Input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_d0 <= ap_const_lv8_0;
        else 
            A_d0 <= "XXXXXXXX";
        end if; 
    end process;


    A_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_2_fu_303_p1, tmp_6_fu_417_p1, tmp_18_fu_491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_address0 <= tmp_18_fu_491_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            B_address0 <= tmp_6_fu_417_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_address0 <= tmp_2_fu_303_p1(14 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_d0_assign_proc : process(Input_r_q0, ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            B_d0 <= Input_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            B_d0 <= ap_const_lv8_0;
        else 
            B_d0 <= "XXXXXXXX";
        end if; 
    end process;


    B_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_r_address0_assign_proc : process(ap_CS_fsm_state5, tmp_8_fu_348_p1, ap_CS_fsm_state8, tmp_s_fu_402_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Input_r_address0 <= tmp_s_fu_402_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Input_r_address0 <= tmp_8_fu_348_p1(15 - 1 downto 0);
        else 
            Input_r_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    Input_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Input_r_ce0 <= ap_const_logic_1;
        else 
            Input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_422_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, exitcond_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_422_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_373_p2 <= "1" when (j2_reg_221 = ap_const_lv2_3) else "0";
    exitcond4_fu_353_p2 <= "1" when (i1_reg_209 = ap_const_lv2_3) else "0";
    exitcond5_fu_326_p2 <= "1" when (j_reg_198 = ap_const_lv2_3) else "0";
    exitcond6_fu_314_p2 <= "1" when (i_reg_186 = ap_const_lv2_3) else "0";
    exitcond7_fu_446_p2 <= "1" when (k_reg_269 = ap_const_lv4_8) else "0";
    exitcond9_fu_434_p2 <= "1" when (j7_reg_245 = ap_const_lv4_8) else "0";
    exitcond_fu_422_p2 <= "1" when (i6_reg_233 = ap_const_lv4_8) else "0";
    grp_fu_526_p0 <= grp_fu_526_p00(8 - 1 downto 0);
    grp_fu_526_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_load_reg_636),16));
    grp_fu_526_p1 <= grp_fu_526_p10(8 - 1 downto 0);
    grp_fu_526_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_load_reg_641),16));
    i_1_fu_320_p2 <= std_logic_vector(unsigned(i_reg_186) + unsigned(ap_const_lv2_1));
    i_2_fu_359_p2 <= std_logic_vector(unsigned(i1_reg_209) + unsigned(ap_const_lv2_1));
    i_3_fu_428_p2 <= std_logic_vector(unsigned(i6_reg_233) + unsigned(ap_const_lv4_1));
    indvarinc1_fu_297_p2 <= std_logic_vector(unsigned(invdar1_reg_175) + unsigned(ap_const_lv14_1));
    indvarinc_fu_280_p2 <= std_logic_vector(unsigned(invdar_reg_164) + unsigned(ap_const_lv14_1));
    j_1_fu_332_p2 <= std_logic_vector(unsigned(j_reg_198) + unsigned(ap_const_lv2_1));
    j_2_fu_379_p2 <= std_logic_vector(unsigned(j2_reg_221) + unsigned(ap_const_lv2_1));
    j_3_fu_440_p2 <= std_logic_vector(unsigned(j7_reg_245) + unsigned(ap_const_lv4_1));
    k_1_fu_452_p2 <= std_logic_vector(unsigned(k_reg_269) + unsigned(ap_const_lv4_1));
    tmp1_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_385_p3),9));
    tmp1_fu_385_p3 <= (ap_const_lv6_20 & j2_reg_221);
    tmp_10_fu_501_p1 <= i6_reg_233(3 - 1 downto 0);
    tmp_11_fu_505_p4 <= ((tmp_10_fu_501_p1 & ap_const_lv3_0) & j7_reg_245);
    tmp_12_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_505_p4),64));
    tmp_13_fu_458_p1 <= i6_reg_233(3 - 1 downto 0);
    tmp_14_fu_462_p4 <= ((tmp_13_fu_458_p1 & ap_const_lv3_0) & k_reg_269);
    tmp_15_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_462_p4),64));
    tmp_16_fu_477_p1 <= k_reg_269(3 - 1 downto 0);
    tmp_17_fu_481_p4 <= ((tmp_16_fu_477_p1 & ap_const_lv3_0) & j7_reg_245);
    tmp_18_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_481_p4),64));
    tmp_1_fu_291_p2 <= "1" when (invdar_reg_164 = ap_const_lv14_3FFF) else "0";
    tmp_2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_175),64));
    tmp_3_fu_308_p2 <= "1" when (invdar1_reg_175 = ap_const_lv14_3FFF) else "0";
    tmp_4_fu_407_p4 <= ((i1_reg_209 & ap_const_lv5_0) & j2_reg_221);
    tmp_5_fu_365_p3 <= (i1_reg_209 & ap_const_lv7_0);
    tmp_6_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_407_p4),64));
    tmp_7_fu_338_p4 <= ((i_reg_186 & ap_const_lv5_0) & j_reg_198);
    tmp_8_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_338_p4),64));
    tmp_9_fu_397_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_393_p1) + unsigned(tmp_5_reg_584));
    tmp_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_164),64));
    tmp_s_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_397_p2),64));
end behav;
