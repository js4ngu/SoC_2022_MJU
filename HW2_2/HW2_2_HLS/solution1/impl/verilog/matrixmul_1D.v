// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_1D,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=100805,HLS_SYN_TPT=none,HLS_SYN_MEM=51,HLS_SYN_DSP=1,HLS_SYN_FF=226,HLS_SYN_LUT=589,HLS_VERSION=2018_2}" *)

module matrixmul_1D (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_orign_address0,
        Input_orign_ce0,
        Input_orign_q0,
        AB_address0,
        AB_ce0,
        AB_we0,
        AB_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] Input_orign_address0;
output   Input_orign_ce0;
input  [7:0] Input_orign_q0;
output  [13:0] AB_address0;
output   AB_ce0;
output   AB_we0;
output  [31:0] AB_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Input_orign_ce0;
reg AB_ce0;
reg AB_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] i_fu_345_p2;
reg   [8:0] i_reg_678;
wire    ap_CS_fsm_state2;
wire   [16:0] tmp_2_cast_fu_359_p1;
reg   [16:0] tmp_2_cast_reg_683;
wire   [0:0] exitcond7_fu_339_p2;
wire   [7:0] j_1_fu_369_p2;
reg   [7:0] j_1_reg_691;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond6_fu_363_p2;
wire   [16:0] tmp_3_fu_396_p2;
reg   [16:0] tmp_3_reg_701;
wire   [1:0] i_1_fu_411_p2;
reg   [1:0] i_1_reg_709;
wire    ap_CS_fsm_state5;
wire   [1:0] j_2_fu_423_p2;
reg   [1:0] j_2_reg_717;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_8_fu_439_p1;
reg   [63:0] tmp_8_reg_722;
wire   [0:0] exitcond4_fu_417_p2;
wire   [1:0] i_2_fu_450_p2;
reg   [1:0] i_2_reg_735;
wire    ap_CS_fsm_state8;
wire   [1:0] j_3_fu_462_p2;
reg   [1:0] j_3_reg_743;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond2_fu_456_p2;
wire   [3:0] i_3_fu_506_p2;
reg   [3:0] i_3_reg_756;
wire    ap_CS_fsm_state11;
wire   [3:0] j_5_fu_518_p2;
reg   [3:0] j_5_reg_764;
wire    ap_CS_fsm_state12;
reg   [13:0] AB_2D_addr_reg_769;
wire   [0:0] exitcond9_fu_512_p2;
wire   [3:0] k_1_fu_545_p2;
reg   [3:0] k_1_reg_777;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond10_fu_539_p2;
wire   [7:0] A_q0;
reg   [7:0] A_load_reg_792;
wire    ap_CS_fsm_state14;
wire   [7:0] B_q0;
reg   [7:0] B_load_reg_797;
wire   [18:0] grp_fu_667_p3;
wire    ap_CS_fsm_state15;
wire   [7:0] i_4_fu_593_p2;
reg   [7:0] i_4_reg_810;
wire    ap_CS_fsm_state16;
wire   [15:0] tmp_19_cast1_fu_607_p1;
reg   [15:0] tmp_19_cast1_reg_815;
wire   [0:0] exitcond1_fu_587_p2;
wire   [13:0] tmp_s_fu_615_p3;
reg   [13:0] tmp_s_reg_820;
wire   [7:0] j_4_fu_633_p2;
reg   [7:0] j_4_reg_828;
wire    ap_CS_fsm_state17;
wire   [0:0] exitcond_fu_627_p2;
wire   [13:0] tmp_14_fu_653_p2;
reg   [13:0] tmp_14_reg_838;
reg   [14:0] Input_address0;
reg    Input_ce0;
reg    Input_we0;
wire   [7:0] Input_q0;
reg   [13:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [13:0] AB_2D_address0;
reg    AB_2D_ce0;
reg    AB_2D_we0;
wire   [18:0] AB_2D_q0;
reg   [8:0] i3_reg_199;
reg   [7:0] j_reg_211;
wire    ap_CS_fsm_state4;
reg   [1:0] i4_reg_222;
reg   [1:0] j5_reg_234;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond5_fu_405_p2;
reg   [1:0] i6_reg_245;
reg   [1:0] j7_reg_257;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond3_fu_444_p2;
reg   [3:0] i8_reg_269;
reg   [3:0] j9_reg_281;
wire   [0:0] exitcond8_fu_500_p2;
reg   [3:0] k_reg_293;
reg   [18:0] sum_reg_304;
reg   [7:0] i5_reg_317;
reg   [7:0] j4_reg_328;
wire    ap_CS_fsm_state18;
wire   [63:0] tmp_5_fu_387_p1;
wire   [63:0] tmp_3_cast_fu_401_p1;
wire   [63:0] tmp_2_fu_480_p1;
wire   [63:0] tmp_10_fu_495_p1;
wire   [63:0] tmp_17_fu_534_p1;
wire   [63:0] tmp_20_fu_561_p1;
wire   [63:0] tmp_22_fu_576_p1;
wire   [63:0] tmp_23_cast_fu_648_p1;
wire   [63:0] tmp_15_fu_663_p1;
wire   [15:0] tmp_1_fu_351_p3;
wire   [7:0] tmp_fu_375_p1;
wire   [15:0] tmp_4_fu_379_p3;
wire   [16:0] tmp_6_cast_fu_392_p1;
wire   [8:0] tmp_7_fu_429_p4;
wire   [14:0] tmp_9_fu_468_p5;
wire   [8:0] tmp_6_fu_485_p4;
wire   [10:0] tmp_13_fu_524_p4;
wire   [10:0] tmp_19_fu_551_p4;
wire   [10:0] tmp_21_fu_566_p4;
wire   [14:0] tmp_11_fu_599_p3;
wire   [6:0] tmp_12_fu_611_p1;
wire   [15:0] tmp_12_cast_fu_639_p1;
wire   [15:0] tmp_18_fu_643_p2;
wire   [13:0] j4_cast2_fu_623_p1;
wire   [7:0] grp_fu_667_p0;
wire   [7:0] grp_fu_667_p1;
reg   [17:0] ap_NS_fsm;
wire   [15:0] grp_fu_667_p00;
wire   [15:0] grp_fu_667_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

matrixmul_1D_Input #(
    .DataWidth( 8 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
Input_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Input_address0),
    .ce0(Input_ce0),
    .we0(Input_we0),
    .d0(Input_orign_q0),
    .q0(Input_q0)
);

matrixmul_1D_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(Input_q0),
    .q0(A_q0)
);

matrixmul_1D_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(Input_q0),
    .q0(B_q0)
);

matrixmul_1D_AB_2D #(
    .DataWidth( 19 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
AB_2D_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(AB_2D_address0),
    .ce0(AB_2D_ce0),
    .we0(AB_2D_we0),
    .d0(sum_reg_304),
    .q0(AB_2D_q0)
);

matrixmul_1D_mac_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
matrixmul_1D_mac_bkb_U1(
    .din0(grp_fu_667_p0),
    .din1(grp_fu_667_p1),
    .din2(sum_reg_304),
    .dout(grp_fu_667_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_363_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i3_reg_199 <= i_reg_678;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i3_reg_199 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i4_reg_222 <= 2'd0;
    end else if (((exitcond4_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i4_reg_222 <= i_1_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i5_reg_317 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (exitcond_fu_627_p2 == 1'd1))) begin
        i5_reg_317 <= i_4_reg_810;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i6_reg_245 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_456_p2 == 1'd1))) begin
        i6_reg_245 <= i_2_reg_735;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i8_reg_269 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond9_fu_512_p2 == 1'd1))) begin
        i8_reg_269 <= i_3_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        j4_reg_328 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j4_reg_328 <= j_4_reg_828;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_405_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j5_reg_234 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j5_reg_234 <= j_2_reg_717;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        j7_reg_257 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        j7_reg_257 <= j_3_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_500_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        j9_reg_281 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_539_p2 == 1'd1))) begin
        j9_reg_281 <= j_5_reg_764;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_211 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_211 <= j_1_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_reg_293 <= k_1_reg_777;
    end else if (((exitcond9_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        k_reg_293 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_reg_304 <= grp_fu_667_p3;
    end else if (((exitcond9_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        sum_reg_304 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_512_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        AB_2D_addr_reg_769[3 : 0] <= tmp_17_fu_534_p1[3 : 0];
AB_2D_addr_reg_769[10 : 7] <= tmp_17_fu_534_p1[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        A_load_reg_792 <= A_q0;
        B_load_reg_797 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_709 <= i_1_fu_411_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_735 <= i_2_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_756 <= i_3_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_4_reg_810 <= i_4_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_678 <= i_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_691 <= j_1_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_717 <= j_2_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_3_reg_743 <= j_3_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        j_4_reg_828 <= j_4_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_5_reg_764 <= j_5_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_1_reg_777 <= k_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_627_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_14_reg_838 <= tmp_14_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_587_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_19_cast1_reg_815[14 : 7] <= tmp_19_cast1_fu_607_p1[14 : 7];
        tmp_s_reg_820[13 : 7] <= tmp_s_fu_615_p3[13 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_2_cast_reg_683[15 : 7] <= tmp_2_cast_fu_359_p1[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_363_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_3_reg_701 <= tmp_3_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_417_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_8_reg_722[1 : 0] <= tmp_8_fu_439_p1[1 : 0];
tmp_8_reg_722[8 : 7] <= tmp_8_fu_439_p1[8 : 7];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        AB_2D_address0 = tmp_23_cast_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        AB_2D_address0 = AB_2D_addr_reg_769;
    end else begin
        AB_2D_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13))) begin
        AB_2D_ce0 = 1'b1;
    end else begin
        AB_2D_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_539_p2 == 1'd1))) begin
        AB_2D_we0 = 1'b1;
    end else begin
        AB_2D_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        A_address0 = tmp_20_fu_561_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = tmp_8_reg_722;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        B_address0 = tmp_22_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = tmp_10_fu_495_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Input_address0 = tmp_2_fu_480_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Input_address0 = tmp_8_fu_439_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Input_address0 = tmp_3_cast_fu_401_p1;
    end else begin
        Input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        Input_ce0 = 1'b1;
    end else begin
        Input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Input_orign_ce0 = 1'b1;
    end else begin
        Input_orign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Input_we0 = 1'b1;
    end else begin
        Input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond1_fu_587_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond1_fu_587_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond7_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond6_fu_363_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond5_fu_405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond4_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond3_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((exitcond8_fu_500_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond9_fu_512_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond10_fu_539_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (exitcond1_fu_587_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (exitcond_fu_627_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = tmp_15_fu_663_p1;

assign AB_d0 = AB_2D_q0;

assign Input_orign_address0 = tmp_5_fu_387_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond10_fu_539_p2 = ((k_reg_293 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond1_fu_587_p2 = ((i5_reg_317 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond2_fu_456_p2 = ((j7_reg_257 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond3_fu_444_p2 = ((i6_reg_245 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond4_fu_417_p2 = ((j5_reg_234 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond5_fu_405_p2 = ((i4_reg_222 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond6_fu_363_p2 = ((j_reg_211 == 8'd128) ? 1'b1 : 1'b0);

assign exitcond7_fu_339_p2 = ((i3_reg_199 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond8_fu_500_p2 = ((i8_reg_269 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond9_fu_512_p2 = ((j9_reg_281 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_627_p2 = ((j4_reg_328 == 8'd128) ? 1'b1 : 1'b0);

assign grp_fu_667_p0 = grp_fu_667_p00;

assign grp_fu_667_p00 = A_load_reg_792;

assign grp_fu_667_p1 = grp_fu_667_p10;

assign grp_fu_667_p10 = B_load_reg_797;

assign i_1_fu_411_p2 = (i4_reg_222 + 2'd1);

assign i_2_fu_450_p2 = (i6_reg_245 + 2'd1);

assign i_3_fu_506_p2 = (i8_reg_269 + 4'd1);

assign i_4_fu_593_p2 = (i5_reg_317 + 8'd1);

assign i_fu_345_p2 = (i3_reg_199 + 9'd1);

assign j4_cast2_fu_623_p1 = j4_reg_328;

assign j_1_fu_369_p2 = (j_reg_211 + 8'd1);

assign j_2_fu_423_p2 = (j5_reg_234 + 2'd1);

assign j_3_fu_462_p2 = (j7_reg_257 + 2'd1);

assign j_4_fu_633_p2 = (j4_reg_328 + 8'd1);

assign j_5_fu_518_p2 = (j9_reg_281 + 4'd1);

assign k_1_fu_545_p2 = (k_reg_293 + 4'd1);

assign tmp_10_fu_495_p1 = tmp_6_fu_485_p4;

assign tmp_11_fu_599_p3 = {{i5_reg_317}, {7'd0}};

assign tmp_12_cast_fu_639_p1 = j4_reg_328;

assign tmp_12_fu_611_p1 = i5_reg_317[6:0];

assign tmp_13_fu_524_p4 = {{{i8_reg_269}, {3'd0}}, {j9_reg_281}};

assign tmp_14_fu_653_p2 = (j4_cast2_fu_623_p1 + tmp_s_reg_820);

assign tmp_15_fu_663_p1 = tmp_14_reg_838;

assign tmp_17_fu_534_p1 = tmp_13_fu_524_p4;

assign tmp_18_fu_643_p2 = (tmp_19_cast1_reg_815 + tmp_12_cast_fu_639_p1);

assign tmp_19_cast1_fu_607_p1 = tmp_11_fu_599_p3;

assign tmp_19_fu_551_p4 = {{{i8_reg_269}, {3'd0}}, {k_reg_293}};

assign tmp_1_fu_351_p3 = {{i3_reg_199}, {7'd0}};

assign tmp_20_fu_561_p1 = tmp_19_fu_551_p4;

assign tmp_21_fu_566_p4 = {{{k_reg_293}, {3'd0}}, {j9_reg_281}};

assign tmp_22_fu_576_p1 = tmp_21_fu_566_p4;

assign tmp_23_cast_fu_648_p1 = tmp_18_fu_643_p2;

assign tmp_2_cast_fu_359_p1 = tmp_1_fu_351_p3;

assign tmp_2_fu_480_p1 = tmp_9_fu_468_p5;

assign tmp_3_cast_fu_401_p1 = tmp_3_reg_701;

assign tmp_3_fu_396_p2 = (tmp_6_cast_fu_392_p1 + tmp_2_cast_reg_683);

assign tmp_4_fu_379_p3 = {{tmp_fu_375_p1}, {j_reg_211}};

assign tmp_5_fu_387_p1 = tmp_4_fu_379_p3;

assign tmp_6_cast_fu_392_p1 = j_reg_211;

assign tmp_6_fu_485_p4 = {{{i6_reg_245}, {5'd0}}, {j7_reg_257}};

assign tmp_7_fu_429_p4 = {{{i4_reg_222}, {5'd0}}, {j5_reg_234}};

assign tmp_8_fu_439_p1 = tmp_7_fu_429_p4;

assign tmp_9_fu_468_p5 = {{{{{{6'd32}, {i6_reg_245}}}, {5'd0}}}, {j7_reg_257}};

assign tmp_fu_375_p1 = i3_reg_199[7:0];

assign tmp_s_fu_615_p3 = {{tmp_12_fu_611_p1}, {7'd0}};

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_683[6:0] <= 7'b0000000;
    tmp_2_cast_reg_683[16] <= 1'b0;
    tmp_8_reg_722[6:2] <= 5'b00000;
    tmp_8_reg_722[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    AB_2D_addr_reg_769[6:4] <= 3'b000;
    AB_2D_addr_reg_769[13:11] <= 3'b000;
    tmp_19_cast1_reg_815[6:0] <= 7'b0000000;
    tmp_19_cast1_reg_815[15] <= 1'b0;
    tmp_s_reg_820[6:0] <= 7'b0000000;
end

endmodule //matrixmul_1D
