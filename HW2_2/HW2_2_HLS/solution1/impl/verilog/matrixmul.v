// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=1,HLS_SYN_FF=1187,HLS_SYN_LUT=1221,HLS_VERSION=2018_2}" *)

module matrixmul (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Input_r_TDATA,
        Input_r_TVALID,
        Input_r_TREADY,
        AB_TDATA,
        AB_TVALID,
        AB_TREADY,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] Input_r_TDATA;
input   Input_r_TVALID;
output   Input_r_TREADY;
output  [31:0] AB_TDATA;
output   AB_TVALID;
input   AB_TREADY;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] lm;
reg   [31:0] lm_0_data_reg;
reg    lm_0_vld_reg;
reg    lm_0_ack_out;
wire   [31:0] ln;
reg   [31:0] ln_0_data_reg;
reg    ln_0_vld_reg;
reg    ln_0_ack_out;
wire   [31:0] lp;
reg   [31:0] lp_0_data_reg;
reg    lp_0_vld_reg;
reg    lp_0_ack_out;
reg   [7:0] Input_r_0_data_out;
wire    Input_r_0_vld_in;
wire    Input_r_0_vld_out;
wire    Input_r_0_ack_in;
reg    Input_r_0_ack_out;
reg   [7:0] Input_r_0_payload_A;
reg   [7:0] Input_r_0_payload_B;
reg    Input_r_0_sel_rd;
reg    Input_r_0_sel_wr;
wire    Input_r_0_sel;
wire    Input_r_0_load_A;
wire    Input_r_0_load_B;
reg   [1:0] Input_r_0_state;
wire    Input_r_0_state_cmp_full;
reg   [31:0] AB_1_data_out;
reg    AB_1_vld_in;
wire    AB_1_vld_out;
wire    AB_1_ack_in;
wire    AB_1_ack_out;
reg   [31:0] AB_1_payload_A;
reg   [31:0] AB_1_payload_B;
reg    AB_1_sel_rd;
reg    AB_1_sel_wr;
wire    AB_1_sel;
wire    AB_1_load_A;
wire    AB_1_load_B;
reg   [1:0] AB_1_state;
wire    AB_1_state_cmp_full;
reg    Input_r_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
reg    AB_TDATA_blk_n;
wire    ap_CS_fsm_state14;
wire   [0:0] tmp_14_fu_512_p2;
wire    ap_CS_fsm_state17;
reg   [31:0] lp_read_reg_574;
wire    ap_CS_fsm_state2;
reg   [31:0] ln_read_reg_580;
reg   [31:0] lm_read_reg_587;
wire   [30:0] i_1_fu_296_p2;
reg   [30:0] i_1_reg_596;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_9_cast_fu_306_p3;
reg   [15:0] tmp_9_cast_reg_601;
wire   [0:0] tmp_fu_291_p2;
wire   [30:0] j_1_fu_323_p2;
reg   [30:0] j_1_reg_609;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_6_fu_333_p2;
reg   [15:0] tmp_6_reg_614;
wire   [0:0] tmp_2_fu_318_p2;
wire   [30:0] i_2_fu_351_p2;
reg   [30:0] i_2_reg_622;
wire    ap_CS_fsm_state6;
wire   [15:0] tmp_18_cast1_fu_361_p3;
reg   [15:0] tmp_18_cast1_reg_627;
wire   [0:0] tmp_3_fu_346_p2;
wire   [30:0] j_2_fu_378_p2;
reg   [30:0] j_2_reg_635;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_13_fu_388_p2;
reg   [15:0] tmp_13_reg_640;
wire   [0:0] tmp_s_fu_373_p2;
wire   [30:0] i_3_fu_406_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] m_1_fu_412_p2;
wire   [0:0] tmp_5_fu_401_p2;
wire   [30:0] i_4_fu_427_p2;
wire    ap_CS_fsm_state10;
wire   [31:0] n_1_fu_433_p2;
wire   [0:0] tmp_7_fu_422_p2;
wire   [30:0] i_5_fu_448_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] p_1_fu_454_p2;
wire   [0:0] tmp_8_fu_443_p2;
wire   [30:0] i_6_fu_470_p2;
reg   [30:0] i_6_reg_687;
wire    ap_CS_fsm_state12;
wire   [15:0] tmp_24_cast_fu_480_p3;
reg   [15:0] tmp_24_cast_reg_692;
wire   [0:0] tmp_10_fu_464_p2;
wire   [30:0] j_3_fu_498_p2;
reg   [30:0] j_3_reg_700;
wire    ap_CS_fsm_state13;
wire   [15:0] tmp_20_fu_504_p1;
reg   [15:0] tmp_20_reg_705;
wire   [0:0] tmp_12_fu_492_p2;
wire   [30:0] k_1_fu_518_p2;
reg   [30:0] k_1_reg_713;
reg    ap_block_state14_io;
wire   [7:0] A_q0;
reg   [7:0] A_load_reg_728;
wire    ap_CS_fsm_state15;
wire   [7:0] B_q0;
reg   [7:0] B_load_reg_733;
wire   [31:0] grp_fu_566_p3;
wire    ap_CS_fsm_state16;
reg   [13:0] A_address0;
reg    A_ce0;
reg    A_we0;
reg   [13:0] B_address0;
reg    B_ce0;
reg    B_we0;
reg   [30:0] i_reg_127;
reg   [30:0] j_reg_138;
reg   [30:0] i1_reg_149;
reg   [30:0] j2_reg_160;
reg   [30:0] i3_reg_171;
reg   [31:0] m_reg_182;
reg   [30:0] i4_reg_194;
reg   [31:0] n_reg_205;
reg   [31:0] p_reg_217;
reg   [30:0] i5_reg_229;
reg   [30:0] i6_reg_240;
reg   [30:0] j7_reg_251;
reg   [31:0] sum_reg_262;
reg   [30:0] k_reg_276;
wire   [63:0] tmp_11_cast_fu_338_p1;
wire   [63:0] tmp_19_cast_fu_393_p1;
wire   [63:0] tmp_25_cast_fu_533_p1;
wire   [63:0] tmp_28_cast_fu_555_p1;
wire   [31:0] i_cast_fu_287_p1;
wire   [8:0] tmp_1_fu_302_p1;
wire   [31:0] j_cast_fu_314_p1;
wire   [15:0] tmp_4_fu_329_p1;
wire   [31:0] i1_cast_fu_342_p1;
wire   [8:0] tmp_9_fu_357_p1;
wire   [31:0] j2_cast_fu_369_p1;
wire   [15:0] tmp_11_fu_384_p1;
wire   [31:0] i3_cast_fu_397_p1;
wire   [31:0] i4_cast_fu_418_p1;
wire   [31:0] i5_cast_fu_439_p1;
wire   [31:0] i6_cast_fu_460_p1;
wire   [8:0] tmp_19_fu_476_p1;
wire   [31:0] j7_cast_fu_488_p1;
wire   [31:0] k_cast_fu_508_p1;
wire   [15:0] tmp_21_fu_524_p1;
wire   [15:0] tmp_15_fu_528_p2;
wire   [8:0] tmp_22_fu_538_p1;
wire   [15:0] tmp_27_cast_fu_542_p3;
wire   [15:0] tmp_17_fu_550_p2;
wire   [7:0] grp_fu_566_p0;
wire   [7:0] grp_fu_566_p1;
reg   [16:0] ap_NS_fsm;
wire   [15:0] grp_fu_566_p00;
wire   [15:0] grp_fu_566_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 lm_0_data_reg = 32'd0;
#0 lm_0_vld_reg = 1'b0;
#0 ln_0_data_reg = 32'd0;
#0 ln_0_vld_reg = 1'b0;
#0 lp_0_data_reg = 32'd0;
#0 lp_0_vld_reg = 1'b0;
#0 Input_r_0_sel_rd = 1'b0;
#0 Input_r_0_sel_wr = 1'b0;
#0 Input_r_0_state = 2'd0;
#0 AB_1_sel_rd = 1'b0;
#0 AB_1_sel_wr = 1'b0;
#0 AB_1_state = 2'd0;
end

matrixmul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixmul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .lm(lm),
    .ln(ln),
    .lp(lp)
);

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(A_address0),
    .ce0(A_ce0),
    .we0(A_we0),
    .d0(Input_r_0_data_out),
    .q0(A_q0)
);

matrixmul_A #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(B_address0),
    .ce0(B_ce0),
    .we0(B_we0),
    .d0(Input_r_0_data_out),
    .q0(B_q0)
);

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mac_mulbkb_U1(
    .din0(grp_fu_566_p0),
    .din1(grp_fu_566_p1),
    .din2(sum_reg_262),
    .dout(grp_fu_566_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AB_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AB_1_ack_out) & (1'b1 == AB_1_vld_out))) begin
            AB_1_sel_rd <= ~AB_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AB_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AB_1_ack_in) & (1'b1 == AB_1_vld_in))) begin
            AB_1_sel_wr <= ~AB_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AB_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == AB_1_vld_in) & (2'd2 == AB_1_state)) | ((1'b0 == AB_1_vld_in) & (1'b1 == AB_1_ack_out) & (2'd3 == AB_1_state)))) begin
            AB_1_state <= 2'd2;
        end else if ((((1'b0 == AB_1_ack_out) & (2'd1 == AB_1_state)) | ((1'b0 == AB_1_ack_out) & (1'b1 == AB_1_vld_in) & (2'd3 == AB_1_state)))) begin
            AB_1_state <= 2'd1;
        end else if (((~((1'b0 == AB_1_vld_in) & (1'b1 == AB_1_ack_out)) & ~((1'b0 == AB_1_ack_out) & (1'b1 == AB_1_vld_in)) & (2'd3 == AB_1_state)) | ((1'b1 == AB_1_ack_out) & (2'd1 == AB_1_state)) | ((1'b1 == AB_1_vld_in) & (2'd2 == AB_1_state)))) begin
            AB_1_state <= 2'd3;
        end else begin
            AB_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Input_r_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == Input_r_0_ack_out) & (1'b1 == Input_r_0_vld_out))) begin
            Input_r_0_sel_rd <= ~Input_r_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Input_r_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == Input_r_0_ack_in) & (1'b1 == Input_r_0_vld_in))) begin
            Input_r_0_sel_wr <= ~Input_r_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        Input_r_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == Input_r_0_vld_in) & (2'd2 == Input_r_0_state)) | ((1'b0 == Input_r_0_vld_in) & (1'b1 == Input_r_0_ack_out) & (2'd3 == Input_r_0_state)))) begin
            Input_r_0_state <= 2'd2;
        end else if ((((1'b0 == Input_r_0_ack_out) & (2'd1 == Input_r_0_state)) | ((1'b0 == Input_r_0_ack_out) & (1'b1 == Input_r_0_vld_in) & (2'd3 == Input_r_0_state)))) begin
            Input_r_0_state <= 2'd1;
        end else if (((~((1'b0 == Input_r_0_vld_in) & (1'b1 == Input_r_0_ack_out)) & ~((1'b0 == Input_r_0_ack_out) & (1'b1 == Input_r_0_vld_in)) & (2'd3 == Input_r_0_state)) | ((1'b1 == Input_r_0_ack_out) & (2'd1 == Input_r_0_state)) | ((1'b1 == Input_r_0_vld_in) & (2'd2 == Input_r_0_state)))) begin
            Input_r_0_state <= 2'd3;
        end else begin
            Input_r_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_291_p2 == 1'd0))) begin
        i1_reg_149 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_373_p2 == 1'd0))) begin
        i1_reg_149 <= i_2_reg_622;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_346_p2 == 1'd0))) begin
        i3_reg_171 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_401_p2 == 1'd1))) begin
        i3_reg_171 <= i_3_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_401_p2 == 1'd0))) begin
        i4_reg_194 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_422_p2 == 1'd1))) begin
        i4_reg_194 <= i_4_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_422_p2 == 1'd0))) begin
        i5_reg_229 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_8_fu_443_p2 == 1'd1))) begin
        i5_reg_229 <= i_5_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_8_fu_443_p2 == 1'd0))) begin
        i6_reg_240 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_12_fu_492_p2 == 1'd0))) begin
        i6_reg_240 <= i_6_reg_687;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_318_p2 == 1'd0))) begin
        i_reg_127 <= i_1_reg_596;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_127 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_346_p2 == 1'd1))) begin
        j2_reg_160 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_r_0_vld_out))) begin
        j2_reg_160 <= j_2_reg_635;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AB_1_ack_in)) begin
        if (((1'b1 == ap_CS_fsm_state12) & (tmp_10_fu_464_p2 == 1'd1))) begin
            j7_reg_251 <= 31'd0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            j7_reg_251 <= j_3_reg_700;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_291_p2 == 1'd1))) begin
        j_reg_138 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_r_0_vld_out))) begin
        j_reg_138 <= j_1_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        k_reg_276 <= k_1_reg_713;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_12_fu_492_p2 == 1'd1))) begin
        k_reg_276 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_346_p2 == 1'd0))) begin
        m_reg_182 <= 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_401_p2 == 1'd1))) begin
        m_reg_182 <= m_1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_401_p2 == 1'd0))) begin
        n_reg_205 <= 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_422_p2 == 1'd1))) begin
        n_reg_205 <= n_1_fu_433_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_422_p2 == 1'd0))) begin
        p_reg_217 <= 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_8_fu_443_p2 == 1'd1))) begin
        p_reg_217 <= p_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_reg_262 <= grp_fu_566_p3;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_12_fu_492_p2 == 1'd1))) begin
        sum_reg_262 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AB_1_load_A)) begin
        AB_1_payload_A <= sum_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AB_1_load_B)) begin
        AB_1_payload_B <= sum_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        A_load_reg_728 <= A_q0;
        B_load_reg_733 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Input_r_0_load_A)) begin
        Input_r_0_payload_A <= Input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == Input_r_0_load_B)) begin
        Input_r_0_payload_B <= Input_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_596 <= i_1_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_622 <= i_2_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in))) begin
        i_6_reg_687 <= i_6_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_609 <= j_1_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_2_reg_635 <= j_2_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_3_reg_700 <= j_3_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14))) begin
        k_1_reg_713 <= k_1_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lm_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lm_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (lm_0_vld_reg == 1'b1)))) begin
        lm_0_data_reg <= lm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        lm_read_reg_587 <= lm_0_data_reg;
        ln_read_reg_580 <= ln_0_data_reg;
        lp_read_reg_574 <= lp_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (ln_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (ln_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (ln_0_vld_reg == 1'b1)))) begin
        ln_0_data_reg <= ln;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lp_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lp_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (lp_0_vld_reg == 1'b1)))) begin
        lp_0_data_reg <= lp;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_373_p2 == 1'd1))) begin
        tmp_13_reg_640 <= tmp_13_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_346_p2 == 1'd1))) begin
        tmp_18_cast1_reg_627[15 : 7] <= tmp_18_cast1_fu_361_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_12_fu_492_p2 == 1'd1))) begin
        tmp_20_reg_705 <= tmp_20_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd1))) begin
        tmp_24_cast_reg_692[15 : 7] <= tmp_24_cast_fu_480_p3[15 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_318_p2 == 1'd1))) begin
        tmp_6_reg_614 <= tmp_6_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_291_p2 == 1'd1))) begin
        tmp_9_cast_reg_601[15 : 7] <= tmp_9_cast_fu_306_p3[15 : 7];
    end
end

always @ (*) begin
    if ((1'b1 == AB_1_sel)) begin
        AB_1_data_out = AB_1_payload_B;
    end else begin
        AB_1_data_out = AB_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14) & (tmp_14_fu_512_p2 == 1'd0))) begin
        AB_1_vld_in = 1'b1;
    end else begin
        AB_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state14) & (tmp_14_fu_512_p2 == 1'd0)))) begin
        AB_TDATA_blk_n = AB_1_state[1'd1];
    end else begin
        AB_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        A_address0 = tmp_25_cast_fu_533_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = tmp_11_cast_fu_338_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_r_0_vld_out)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_r_0_vld_out))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        B_address0 = tmp_28_cast_fu_555_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        B_address0 = tmp_19_cast_fu_393_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_r_0_vld_out)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_r_0_vld_out))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_r_0_vld_out)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_r_0_vld_out)))) begin
        Input_r_0_ack_out = 1'b1;
    end else begin
        Input_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == Input_r_0_sel)) begin
        Input_r_0_data_out = Input_r_0_payload_B;
    end else begin
        Input_r_0_data_out = Input_r_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        Input_r_TDATA_blk_n = Input_r_0_state[1'd0];
    end else begin
        Input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
        lm_0_ack_out = 1'b1;
    end else begin
        lm_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
        ln_0_ack_out = 1'b1;
    end else begin
        ln_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
        lp_0_ack_out = 1'b1;
    end else begin
        lp_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_fu_291_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (tmp_2_fu_318_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b1 == Input_r_0_vld_out))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_3_fu_346_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_s_fu_373_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == Input_r_0_vld_out))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_5_fu_401_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_422_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_8_fu_443_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state12) & (1'b1 == AB_1_ack_in) & (tmp_10_fu_464_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (tmp_12_fu_492_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14) & (tmp_14_fu_512_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if (((1'b0 == ap_block_state14_io) & (1'b1 == ap_CS_fsm_state14) & (tmp_14_fu_512_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (1'b1 == AB_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_1_ack_in = AB_1_state[1'd1];

assign AB_1_ack_out = AB_TREADY;

assign AB_1_load_A = (~AB_1_sel_wr & AB_1_state_cmp_full);

assign AB_1_load_B = (AB_1_state_cmp_full & AB_1_sel_wr);

assign AB_1_sel = AB_1_sel_rd;

assign AB_1_state_cmp_full = ((AB_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AB_1_vld_out = AB_1_state[1'd0];

assign AB_TDATA = AB_1_data_out;

assign AB_TVALID = AB_1_state[1'd0];

assign Input_r_0_ack_in = Input_r_0_state[1'd1];

assign Input_r_0_load_A = (~Input_r_0_sel_wr & Input_r_0_state_cmp_full);

assign Input_r_0_load_B = (Input_r_0_state_cmp_full & Input_r_0_sel_wr);

assign Input_r_0_sel = Input_r_0_sel_rd;

assign Input_r_0_state_cmp_full = ((Input_r_0_state != 2'd1) ? 1'b1 : 1'b0);

assign Input_r_0_vld_in = Input_r_TVALID;

assign Input_r_0_vld_out = Input_r_0_state[1'd0];

assign Input_r_TREADY = Input_r_0_state[1'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state14_io = ((1'b0 == AB_1_ack_in) & (tmp_14_fu_512_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_566_p0 = grp_fu_566_p00;

assign grp_fu_566_p00 = B_load_reg_733;

assign grp_fu_566_p1 = grp_fu_566_p10;

assign grp_fu_566_p10 = A_load_reg_728;

assign i1_cast_fu_342_p1 = i1_reg_149;

assign i3_cast_fu_397_p1 = i3_reg_171;

assign i4_cast_fu_418_p1 = i4_reg_194;

assign i5_cast_fu_439_p1 = i5_reg_229;

assign i6_cast_fu_460_p1 = i6_reg_240;

assign i_1_fu_296_p2 = (i_reg_127 + 31'd1);

assign i_2_fu_351_p2 = (i1_reg_149 + 31'd1);

assign i_3_fu_406_p2 = (i3_reg_171 + 31'd1);

assign i_4_fu_427_p2 = (i4_reg_194 + 31'd1);

assign i_5_fu_448_p2 = (i5_reg_229 + 31'd1);

assign i_6_fu_470_p2 = (i6_reg_240 + 31'd1);

assign i_cast_fu_287_p1 = i_reg_127;

assign j2_cast_fu_369_p1 = j2_reg_160;

assign j7_cast_fu_488_p1 = j7_reg_251;

assign j_1_fu_323_p2 = (j_reg_138 + 31'd1);

assign j_2_fu_378_p2 = (j2_reg_160 + 31'd1);

assign j_3_fu_498_p2 = (j7_reg_251 + 31'd1);

assign j_cast_fu_314_p1 = j_reg_138;

assign k_1_fu_518_p2 = (k_reg_276 + 31'd1);

assign k_cast_fu_508_p1 = k_reg_276;

assign m_1_fu_412_p2 = m_reg_182 << 32'd1;

assign n_1_fu_433_p2 = n_reg_205 << 32'd1;

assign p_1_fu_454_p2 = p_reg_217 << 32'd1;

assign tmp_10_fu_464_p2 = (($signed(i6_cast_fu_460_p1) < $signed(m_reg_182)) ? 1'b1 : 1'b0);

assign tmp_11_cast_fu_338_p1 = tmp_6_reg_614;

assign tmp_11_fu_384_p1 = j2_reg_160[15:0];

assign tmp_12_fu_492_p2 = (($signed(j7_cast_fu_488_p1) < $signed(p_reg_217)) ? 1'b1 : 1'b0);

assign tmp_13_fu_388_p2 = (tmp_18_cast1_reg_627 + tmp_11_fu_384_p1);

assign tmp_14_fu_512_p2 = (($signed(k_cast_fu_508_p1) < $signed(n_reg_205)) ? 1'b1 : 1'b0);

assign tmp_15_fu_528_p2 = (tmp_24_cast_reg_692 + tmp_21_fu_524_p1);

assign tmp_17_fu_550_p2 = (tmp_27_cast_fu_542_p3 + tmp_20_reg_705);

assign tmp_18_cast1_fu_361_p3 = {{tmp_9_fu_357_p1}, {7'd0}};

assign tmp_19_cast_fu_393_p1 = tmp_13_reg_640;

assign tmp_19_fu_476_p1 = i6_reg_240[8:0];

assign tmp_1_fu_302_p1 = i_reg_127[8:0];

assign tmp_20_fu_504_p1 = j7_reg_251[15:0];

assign tmp_21_fu_524_p1 = k_reg_276[15:0];

assign tmp_22_fu_538_p1 = k_reg_276[8:0];

assign tmp_24_cast_fu_480_p3 = {{tmp_19_fu_476_p1}, {7'd0}};

assign tmp_25_cast_fu_533_p1 = tmp_15_fu_528_p2;

assign tmp_27_cast_fu_542_p3 = {{tmp_22_fu_538_p1}, {7'd0}};

assign tmp_28_cast_fu_555_p1 = tmp_17_fu_550_p2;

assign tmp_2_fu_318_p2 = (($signed(j_cast_fu_314_p1) < $signed(ln_read_reg_580)) ? 1'b1 : 1'b0);

assign tmp_3_fu_346_p2 = (($signed(i1_cast_fu_342_p1) < $signed(ln_read_reg_580)) ? 1'b1 : 1'b0);

assign tmp_4_fu_329_p1 = j_reg_138[15:0];

assign tmp_5_fu_401_p2 = (($signed(i3_cast_fu_397_p1) < $signed(lm_read_reg_587)) ? 1'b1 : 1'b0);

assign tmp_6_fu_333_p2 = (tmp_9_cast_reg_601 + tmp_4_fu_329_p1);

assign tmp_7_fu_422_p2 = (($signed(i4_cast_fu_418_p1) < $signed(ln_read_reg_580)) ? 1'b1 : 1'b0);

assign tmp_8_fu_443_p2 = (($signed(i5_cast_fu_439_p1) < $signed(lp_read_reg_574)) ? 1'b1 : 1'b0);

assign tmp_9_cast_fu_306_p3 = {{tmp_1_fu_302_p1}, {7'd0}};

assign tmp_9_fu_357_p1 = i1_reg_149[8:0];

assign tmp_fu_291_p2 = (($signed(i_cast_fu_287_p1) < $signed(lm_read_reg_587)) ? 1'b1 : 1'b0);

assign tmp_s_fu_373_p2 = (($signed(j2_cast_fu_369_p1) < $signed(lp_read_reg_574)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_9_cast_reg_601[6:0] <= 7'b0000000;
    tmp_18_cast1_reg_627[6:0] <= 7'b0000000;
    tmp_24_cast_reg_692[6:0] <= 7'b0000000;
end

endmodule //matrixmul
