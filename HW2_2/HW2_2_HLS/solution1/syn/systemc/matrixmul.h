// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mac_mulbkb.h"
#include "matrixmul_A.h"
#include "matrixmul_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct matrixmul : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > Input_r_TDATA;
    sc_in< sc_logic > Input_r_TVALID;
    sc_out< sc_logic > Input_r_TREADY;
    sc_out< sc_lv<32> > AB_TDATA;
    sc_out< sc_logic > AB_TVALID;
    sc_in< sc_logic > AB_TREADY;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* matrixmul_AXILiteS_s_axi_U;
    matrixmul_A* A_U;
    matrixmul_A* B_U;
    matrixmul_mac_mulbkb<1,1,8,8,32,32>* matrixmul_mac_mulbkb_U1;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<17> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > lm;
    sc_signal< sc_lv<32> > lm_0_data_reg;
    sc_signal< sc_logic > lm_0_vld_reg;
    sc_signal< sc_logic > lm_0_ack_out;
    sc_signal< sc_lv<32> > ln;
    sc_signal< sc_lv<32> > ln_0_data_reg;
    sc_signal< sc_logic > ln_0_vld_reg;
    sc_signal< sc_logic > ln_0_ack_out;
    sc_signal< sc_lv<32> > lp;
    sc_signal< sc_lv<32> > lp_0_data_reg;
    sc_signal< sc_logic > lp_0_vld_reg;
    sc_signal< sc_logic > lp_0_ack_out;
    sc_signal< sc_lv<8> > Input_r_0_data_out;
    sc_signal< sc_logic > Input_r_0_vld_in;
    sc_signal< sc_logic > Input_r_0_vld_out;
    sc_signal< sc_logic > Input_r_0_ack_in;
    sc_signal< sc_logic > Input_r_0_ack_out;
    sc_signal< sc_lv<8> > Input_r_0_payload_A;
    sc_signal< sc_lv<8> > Input_r_0_payload_B;
    sc_signal< sc_logic > Input_r_0_sel_rd;
    sc_signal< sc_logic > Input_r_0_sel_wr;
    sc_signal< sc_logic > Input_r_0_sel;
    sc_signal< sc_logic > Input_r_0_load_A;
    sc_signal< sc_logic > Input_r_0_load_B;
    sc_signal< sc_lv<2> > Input_r_0_state;
    sc_signal< sc_logic > Input_r_0_state_cmp_full;
    sc_signal< sc_lv<32> > AB_1_data_out;
    sc_signal< sc_logic > AB_1_vld_in;
    sc_signal< sc_logic > AB_1_vld_out;
    sc_signal< sc_logic > AB_1_ack_in;
    sc_signal< sc_logic > AB_1_ack_out;
    sc_signal< sc_lv<32> > AB_1_payload_A;
    sc_signal< sc_lv<32> > AB_1_payload_B;
    sc_signal< sc_logic > AB_1_sel_rd;
    sc_signal< sc_logic > AB_1_sel_wr;
    sc_signal< sc_logic > AB_1_sel;
    sc_signal< sc_logic > AB_1_load_A;
    sc_signal< sc_logic > AB_1_load_B;
    sc_signal< sc_lv<2> > AB_1_state;
    sc_signal< sc_logic > AB_1_state_cmp_full;
    sc_signal< sc_logic > Input_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > AB_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<1> > tmp_14_fu_512_p2;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<32> > lp_read_reg_574;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > ln_read_reg_580;
    sc_signal< sc_lv<32> > lm_read_reg_587;
    sc_signal< sc_lv<31> > i_1_fu_296_p2;
    sc_signal< sc_lv<31> > i_1_reg_596;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<16> > tmp_9_cast_fu_306_p3;
    sc_signal< sc_lv<16> > tmp_9_cast_reg_601;
    sc_signal< sc_lv<1> > tmp_fu_291_p2;
    sc_signal< sc_lv<31> > j_1_fu_323_p2;
    sc_signal< sc_lv<31> > j_1_reg_609;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<16> > tmp_6_fu_333_p2;
    sc_signal< sc_lv<16> > tmp_6_reg_614;
    sc_signal< sc_lv<1> > tmp_2_fu_318_p2;
    sc_signal< sc_lv<31> > i_2_fu_351_p2;
    sc_signal< sc_lv<31> > i_2_reg_622;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<16> > tmp_18_cast1_fu_361_p3;
    sc_signal< sc_lv<16> > tmp_18_cast1_reg_627;
    sc_signal< sc_lv<1> > tmp_3_fu_346_p2;
    sc_signal< sc_lv<31> > j_2_fu_378_p2;
    sc_signal< sc_lv<31> > j_2_reg_635;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<16> > tmp_13_fu_388_p2;
    sc_signal< sc_lv<16> > tmp_13_reg_640;
    sc_signal< sc_lv<1> > tmp_s_fu_373_p2;
    sc_signal< sc_lv<31> > i_3_fu_406_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > m_1_fu_412_p2;
    sc_signal< sc_lv<1> > tmp_5_fu_401_p2;
    sc_signal< sc_lv<31> > i_4_fu_427_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > n_1_fu_433_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_422_p2;
    sc_signal< sc_lv<31> > i_5_fu_448_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<32> > p_1_fu_454_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_443_p2;
    sc_signal< sc_lv<31> > i_6_fu_470_p2;
    sc_signal< sc_lv<31> > i_6_reg_687;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<16> > tmp_24_cast_fu_480_p3;
    sc_signal< sc_lv<16> > tmp_24_cast_reg_692;
    sc_signal< sc_lv<1> > tmp_10_fu_464_p2;
    sc_signal< sc_lv<31> > j_3_fu_498_p2;
    sc_signal< sc_lv<31> > j_3_reg_700;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<16> > tmp_20_fu_504_p1;
    sc_signal< sc_lv<16> > tmp_20_reg_705;
    sc_signal< sc_lv<1> > tmp_12_fu_492_p2;
    sc_signal< sc_lv<31> > k_1_fu_518_p2;
    sc_signal< sc_lv<31> > k_1_reg_713;
    sc_signal< bool > ap_block_state14_io;
    sc_signal< sc_lv<8> > A_q0;
    sc_signal< sc_lv<8> > A_load_reg_728;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<8> > B_q0;
    sc_signal< sc_lv<8> > B_load_reg_733;
    sc_signal< sc_lv<32> > grp_fu_566_p3;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<14> > A_address0;
    sc_signal< sc_logic > A_ce0;
    sc_signal< sc_logic > A_we0;
    sc_signal< sc_lv<14> > B_address0;
    sc_signal< sc_logic > B_ce0;
    sc_signal< sc_logic > B_we0;
    sc_signal< sc_lv<31> > i_reg_127;
    sc_signal< sc_lv<31> > j_reg_138;
    sc_signal< sc_lv<31> > i1_reg_149;
    sc_signal< sc_lv<31> > j2_reg_160;
    sc_signal< sc_lv<31> > i3_reg_171;
    sc_signal< sc_lv<32> > m_reg_182;
    sc_signal< sc_lv<31> > i4_reg_194;
    sc_signal< sc_lv<32> > n_reg_205;
    sc_signal< sc_lv<32> > p_reg_217;
    sc_signal< sc_lv<31> > i5_reg_229;
    sc_signal< sc_lv<31> > i6_reg_240;
    sc_signal< sc_lv<31> > j7_reg_251;
    sc_signal< sc_lv<32> > sum_reg_262;
    sc_signal< sc_lv<31> > k_reg_276;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_338_p1;
    sc_signal< sc_lv<64> > tmp_19_cast_fu_393_p1;
    sc_signal< sc_lv<64> > tmp_25_cast_fu_533_p1;
    sc_signal< sc_lv<64> > tmp_28_cast_fu_555_p1;
    sc_signal< sc_lv<32> > i_cast_fu_287_p1;
    sc_signal< sc_lv<9> > tmp_1_fu_302_p1;
    sc_signal< sc_lv<32> > j_cast_fu_314_p1;
    sc_signal< sc_lv<16> > tmp_4_fu_329_p1;
    sc_signal< sc_lv<32> > i1_cast_fu_342_p1;
    sc_signal< sc_lv<9> > tmp_9_fu_357_p1;
    sc_signal< sc_lv<32> > j2_cast_fu_369_p1;
    sc_signal< sc_lv<16> > tmp_11_fu_384_p1;
    sc_signal< sc_lv<32> > i3_cast_fu_397_p1;
    sc_signal< sc_lv<32> > i4_cast_fu_418_p1;
    sc_signal< sc_lv<32> > i5_cast_fu_439_p1;
    sc_signal< sc_lv<32> > i6_cast_fu_460_p1;
    sc_signal< sc_lv<9> > tmp_19_fu_476_p1;
    sc_signal< sc_lv<32> > j7_cast_fu_488_p1;
    sc_signal< sc_lv<32> > k_cast_fu_508_p1;
    sc_signal< sc_lv<16> > tmp_21_fu_524_p1;
    sc_signal< sc_lv<16> > tmp_15_fu_528_p2;
    sc_signal< sc_lv<9> > tmp_22_fu_538_p1;
    sc_signal< sc_lv<16> > tmp_27_cast_fu_542_p3;
    sc_signal< sc_lv<16> > tmp_17_fu_550_p2;
    sc_signal< sc_lv<8> > grp_fu_566_p0;
    sc_signal< sc_lv<8> > grp_fu_566_p1;
    sc_signal< sc_lv<17> > ap_NS_fsm;
    sc_signal< sc_lv<16> > grp_fu_566_p00;
    sc_signal< sc_lv<16> > grp_fu_566_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<17> ap_ST_fsm_state1;
    static const sc_lv<17> ap_ST_fsm_state2;
    static const sc_lv<17> ap_ST_fsm_state3;
    static const sc_lv<17> ap_ST_fsm_state4;
    static const sc_lv<17> ap_ST_fsm_state5;
    static const sc_lv<17> ap_ST_fsm_state6;
    static const sc_lv<17> ap_ST_fsm_state7;
    static const sc_lv<17> ap_ST_fsm_state8;
    static const sc_lv<17> ap_ST_fsm_state9;
    static const sc_lv<17> ap_ST_fsm_state10;
    static const sc_lv<17> ap_ST_fsm_state11;
    static const sc_lv<17> ap_ST_fsm_state12;
    static const sc_lv<17> ap_ST_fsm_state13;
    static const sc_lv<17> ap_ST_fsm_state14;
    static const sc_lv<17> ap_ST_fsm_state15;
    static const sc_lv<17> ap_ST_fsm_state16;
    static const sc_lv<17> ap_ST_fsm_state17;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_10;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<7> ap_const_lv7_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_AB_1_ack_in();
    void thread_AB_1_ack_out();
    void thread_AB_1_data_out();
    void thread_AB_1_load_A();
    void thread_AB_1_load_B();
    void thread_AB_1_sel();
    void thread_AB_1_state_cmp_full();
    void thread_AB_1_vld_in();
    void thread_AB_1_vld_out();
    void thread_AB_TDATA();
    void thread_AB_TDATA_blk_n();
    void thread_AB_TVALID();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_A_we0();
    void thread_B_address0();
    void thread_B_ce0();
    void thread_B_we0();
    void thread_Input_r_0_ack_in();
    void thread_Input_r_0_ack_out();
    void thread_Input_r_0_data_out();
    void thread_Input_r_0_load_A();
    void thread_Input_r_0_load_B();
    void thread_Input_r_0_sel();
    void thread_Input_r_0_state_cmp_full();
    void thread_Input_r_0_vld_in();
    void thread_Input_r_0_vld_out();
    void thread_Input_r_TDATA_blk_n();
    void thread_Input_r_TREADY();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state14_io();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_fu_566_p0();
    void thread_grp_fu_566_p00();
    void thread_grp_fu_566_p1();
    void thread_grp_fu_566_p10();
    void thread_i1_cast_fu_342_p1();
    void thread_i3_cast_fu_397_p1();
    void thread_i4_cast_fu_418_p1();
    void thread_i5_cast_fu_439_p1();
    void thread_i6_cast_fu_460_p1();
    void thread_i_1_fu_296_p2();
    void thread_i_2_fu_351_p2();
    void thread_i_3_fu_406_p2();
    void thread_i_4_fu_427_p2();
    void thread_i_5_fu_448_p2();
    void thread_i_6_fu_470_p2();
    void thread_i_cast_fu_287_p1();
    void thread_j2_cast_fu_369_p1();
    void thread_j7_cast_fu_488_p1();
    void thread_j_1_fu_323_p2();
    void thread_j_2_fu_378_p2();
    void thread_j_3_fu_498_p2();
    void thread_j_cast_fu_314_p1();
    void thread_k_1_fu_518_p2();
    void thread_k_cast_fu_508_p1();
    void thread_lm_0_ack_out();
    void thread_ln_0_ack_out();
    void thread_lp_0_ack_out();
    void thread_m_1_fu_412_p2();
    void thread_n_1_fu_433_p2();
    void thread_p_1_fu_454_p2();
    void thread_tmp_10_fu_464_p2();
    void thread_tmp_11_cast_fu_338_p1();
    void thread_tmp_11_fu_384_p1();
    void thread_tmp_12_fu_492_p2();
    void thread_tmp_13_fu_388_p2();
    void thread_tmp_14_fu_512_p2();
    void thread_tmp_15_fu_528_p2();
    void thread_tmp_17_fu_550_p2();
    void thread_tmp_18_cast1_fu_361_p3();
    void thread_tmp_19_cast_fu_393_p1();
    void thread_tmp_19_fu_476_p1();
    void thread_tmp_1_fu_302_p1();
    void thread_tmp_20_fu_504_p1();
    void thread_tmp_21_fu_524_p1();
    void thread_tmp_22_fu_538_p1();
    void thread_tmp_24_cast_fu_480_p3();
    void thread_tmp_25_cast_fu_533_p1();
    void thread_tmp_27_cast_fu_542_p3();
    void thread_tmp_28_cast_fu_555_p1();
    void thread_tmp_2_fu_318_p2();
    void thread_tmp_3_fu_346_p2();
    void thread_tmp_4_fu_329_p1();
    void thread_tmp_5_fu_401_p2();
    void thread_tmp_6_fu_333_p2();
    void thread_tmp_7_fu_422_p2();
    void thread_tmp_8_fu_443_p2();
    void thread_tmp_9_cast_fu_306_p3();
    void thread_tmp_9_fu_357_p1();
    void thread_tmp_fu_291_p2();
    void thread_tmp_s_fu_373_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
