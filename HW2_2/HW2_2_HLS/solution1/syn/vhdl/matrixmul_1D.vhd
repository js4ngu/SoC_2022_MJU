-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul_1D is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Input_orign_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    Input_orign_ce0 : OUT STD_LOGIC;
    Input_orign_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    AB_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    AB_ce0 : OUT STD_LOGIC;
    AB_we0 : OUT STD_LOGIC;
    AB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmul_1D is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_1D,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=100805,HLS_SYN_TPT=none,HLS_SYN_MEM=51,HLS_SYN_DSP=1,HLS_SYN_FF=226,HLS_SYN_LUT=589,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_345_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_678 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_cast_fu_359_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_cast_reg_683 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond7_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_691 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond6_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_396_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_reg_701 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_fu_411_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_709 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_2_fu_423_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_717 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_8_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_722 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_450_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_735 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_3_fu_462_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_743 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond2_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_506_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_5_fu_518_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_5_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal AB_2D_addr_reg_769 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond9_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_545_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_777 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond10_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_load_reg_792 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal B_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal B_load_reg_797 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_667_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_4_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_reg_810 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_19_cast1_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_cast1_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_615_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_820 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_4_fu_633_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal exitcond_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_reg_838 : STD_LOGIC_VECTOR (13 downto 0);
    signal Input_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal Input_ce0 : STD_LOGIC;
    signal Input_we0 : STD_LOGIC;
    signal Input_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal A_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_we0 : STD_LOGIC;
    signal B_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_we0 : STD_LOGIC;
    signal AB_2D_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal AB_2D_ce0 : STD_LOGIC;
    signal AB_2D_we0 : STD_LOGIC;
    signal AB_2D_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal i3_reg_199 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i4_reg_222 : STD_LOGIC_VECTOR (1 downto 0);
    signal j5_reg_234 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i6_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal j7_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond3_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i8_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal j9_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond8_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_293 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_reg_304 : STD_LOGIC_VECTOR (18 downto 0);
    signal i5_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal j4_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_5_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_cast_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_351_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_fu_392_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_429_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_468_p5 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_fu_485_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_524_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_551_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_566_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_599_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_611_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_cast_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_643_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j4_cast2_fu_623_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_667_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_667_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_667_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_667_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component matrixmul_1D_mac_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component matrixmul_1D_Input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_1D_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_1D_AB_2D IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (18 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;



begin
    Input_U : component matrixmul_1D_Input
    generic map (
        DataWidth => 8,
        AddressRange => 32768,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Input_address0,
        ce0 => Input_ce0,
        we0 => Input_we0,
        d0 => Input_orign_q0,
        q0 => Input_q0);

    A_U : component matrixmul_1D_A
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        we0 => A_we0,
        d0 => Input_q0,
        q0 => A_q0);

    B_U : component matrixmul_1D_A
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        we0 => B_we0,
        d0 => Input_q0,
        q0 => B_q0);

    AB_2D_U : component matrixmul_1D_AB_2D
    generic map (
        DataWidth => 19,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => AB_2D_address0,
        ce0 => AB_2D_ce0,
        we0 => AB_2D_we0,
        d0 => sum_reg_304,
        q0 => AB_2D_q0);

    matrixmul_1D_mac_bkb_U1 : component matrixmul_1D_mac_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_667_p0,
        din1 => grp_fu_667_p1,
        din2 => sum_reg_304,
        dout => grp_fu_667_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i3_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i3_reg_199 <= i_reg_678;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i3_reg_199 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i4_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_reg_222 <= ap_const_lv2_0;
            elsif (((exitcond4_fu_417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i4_reg_222 <= i_1_reg_709;
            end if; 
        end if;
    end process;

    i5_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i5_reg_317 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_627_p2 = ap_const_lv1_1))) then 
                i5_reg_317 <= i_4_reg_810;
            end if; 
        end if;
    end process;

    i6_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i6_reg_245 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_456_p2 = ap_const_lv1_1))) then 
                i6_reg_245 <= i_2_reg_735;
            end if; 
        end if;
    end process;

    i8_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i8_reg_269 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_512_p2 = ap_const_lv1_1))) then 
                i8_reg_269 <= i_3_reg_756;
            end if; 
        end if;
    end process;

    j4_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                j4_reg_328 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j4_reg_328 <= j_4_reg_828;
            end if; 
        end if;
    end process;

    j5_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_405_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j5_reg_234 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j5_reg_234 <= j_2_reg_717;
            end if; 
        end if;
    end process;

    j7_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j7_reg_257 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j7_reg_257 <= j_3_reg_743;
            end if; 
        end if;
    end process;

    j9_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_500_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                j9_reg_281 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_539_p2 = ap_const_lv1_1))) then 
                j9_reg_281 <= j_5_reg_764;
            end if; 
        end if;
    end process;

    j_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_211 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_211 <= j_1_reg_691;
            end if; 
        end if;
    end process;

    k_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                k_reg_293 <= k_1_reg_777;
            elsif (((exitcond9_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_reg_293 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    sum_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                sum_reg_304 <= grp_fu_667_p3;
            elsif (((exitcond9_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                sum_reg_304 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_512_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    AB_2D_addr_reg_769(3 downto 0) <= tmp_17_fu_534_p1(14 - 1 downto 0)(3 downto 0);    AB_2D_addr_reg_769(10 downto 7) <= tmp_17_fu_534_p1(14 - 1 downto 0)(10 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                A_load_reg_792 <= A_q0;
                B_load_reg_797 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_709 <= i_1_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_2_reg_735 <= i_2_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_3_reg_756 <= i_3_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_4_reg_810 <= i_4_fu_593_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_678 <= i_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_691 <= j_1_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_717 <= j_2_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_3_reg_743 <= j_3_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                j_4_reg_828 <= j_4_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_5_reg_764 <= j_5_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                k_1_reg_777 <= k_1_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_627_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_14_reg_838 <= tmp_14_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_587_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_19_cast1_reg_815(14 downto 7) <= tmp_19_cast1_fu_607_p1(14 downto 7);
                    tmp_s_reg_820(13 downto 7) <= tmp_s_fu_615_p3(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_2_cast_reg_683(15 downto 7) <= tmp_2_cast_fu_359_p1(15 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_3_reg_701 <= tmp_3_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_417_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_8_reg_722(1 downto 0) <= tmp_8_fu_439_p1(1 downto 0);    tmp_8_reg_722(8 downto 7) <= tmp_8_fu_439_p1(8 downto 7);
            end if;
        end if;
    end process;
    tmp_2_cast_reg_683(6 downto 0) <= "0000000";
    tmp_2_cast_reg_683(16) <= '0';
    tmp_8_reg_722(6 downto 2) <= "00000";
    tmp_8_reg_722(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    AB_2D_addr_reg_769(6 downto 4) <= "000";
    AB_2D_addr_reg_769(13 downto 11) <= "000";
    tmp_19_cast1_reg_815(6 downto 0) <= "0000000";
    tmp_19_cast1_reg_815(15) <= '0';
    tmp_s_reg_820(6 downto 0) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond7_fu_339_p2, ap_CS_fsm_state3, exitcond6_fu_363_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond4_fu_417_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, exitcond2_fu_456_p2, ap_CS_fsm_state11, ap_CS_fsm_state12, exitcond9_fu_512_p2, ap_CS_fsm_state13, exitcond10_fu_539_p2, ap_CS_fsm_state16, exitcond1_fu_587_p2, ap_CS_fsm_state17, exitcond_fu_627_p2, exitcond5_fu_405_p2, exitcond3_fu_444_p2, exitcond8_fu_500_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_363_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((exitcond5_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond4_fu_417_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((exitcond3_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((exitcond8_fu_500_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond9_fu_512_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_539_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_fu_587_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_fu_627_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    AB_2D_address0_assign_proc : process(AB_2D_addr_reg_769, ap_CS_fsm_state13, ap_CS_fsm_state17, tmp_23_cast_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AB_2D_address0 <= tmp_23_cast_fu_648_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            AB_2D_address0 <= AB_2D_addr_reg_769;
        else 
            AB_2D_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    AB_2D_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            AB_2D_ce0 <= ap_const_logic_1;
        else 
            AB_2D_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_2D_we0_assign_proc : process(ap_CS_fsm_state13, exitcond10_fu_539_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond10_fu_539_p2 = ap_const_lv1_1))) then 
            AB_2D_we0 <= ap_const_logic_1;
        else 
            AB_2D_we0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_address0 <= tmp_15_fu_663_p1(14 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AB_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(AB_2D_q0),32));

    AB_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_address0_assign_proc : process(tmp_8_reg_722, ap_CS_fsm_state13, ap_CS_fsm_state7, tmp_20_fu_561_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            A_address0 <= tmp_20_fu_561_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= tmp_8_reg_722(14 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state10, tmp_10_fu_495_p1, tmp_22_fu_576_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            B_address0 <= tmp_22_fu_576_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_address0 <= tmp_10_fu_495_p1(14 - 1 downto 0);
        else 
            B_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_address0_assign_proc : process(ap_CS_fsm_state6, tmp_8_fu_439_p1, ap_CS_fsm_state9, ap_CS_fsm_state4, tmp_3_cast_fu_401_p1, tmp_2_fu_480_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Input_address0 <= tmp_2_fu_480_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Input_address0 <= tmp_8_fu_439_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Input_address0 <= tmp_3_cast_fu_401_p1(15 - 1 downto 0);
        else 
            Input_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    Input_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Input_ce0 <= ap_const_logic_1;
        else 
            Input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Input_orign_address0 <= tmp_5_fu_387_p1(15 - 1 downto 0);

    Input_orign_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Input_orign_ce0 <= ap_const_logic_1;
        else 
            Input_orign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Input_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Input_we0 <= ap_const_logic_1;
        else 
            Input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16, exitcond1_fu_587_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_fu_587_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, exitcond1_fu_587_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond1_fu_587_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_539_p2 <= "1" when (k_reg_293 = ap_const_lv4_8) else "0";
    exitcond1_fu_587_p2 <= "1" when (i5_reg_317 = ap_const_lv8_80) else "0";
    exitcond2_fu_456_p2 <= "1" when (j7_reg_257 = ap_const_lv2_3) else "0";
    exitcond3_fu_444_p2 <= "1" when (i6_reg_245 = ap_const_lv2_3) else "0";
    exitcond4_fu_417_p2 <= "1" when (j5_reg_234 = ap_const_lv2_3) else "0";
    exitcond5_fu_405_p2 <= "1" when (i4_reg_222 = ap_const_lv2_3) else "0";
    exitcond6_fu_363_p2 <= "1" when (j_reg_211 = ap_const_lv8_80) else "0";
    exitcond7_fu_339_p2 <= "1" when (i3_reg_199 = ap_const_lv9_100) else "0";
    exitcond8_fu_500_p2 <= "1" when (i8_reg_269 = ap_const_lv4_8) else "0";
    exitcond9_fu_512_p2 <= "1" when (j9_reg_281 = ap_const_lv4_8) else "0";
    exitcond_fu_627_p2 <= "1" when (j4_reg_328 = ap_const_lv8_80) else "0";
    grp_fu_667_p0 <= grp_fu_667_p00(8 - 1 downto 0);
    grp_fu_667_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_load_reg_792),16));
    grp_fu_667_p1 <= grp_fu_667_p10(8 - 1 downto 0);
    grp_fu_667_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_load_reg_797),16));
    i_1_fu_411_p2 <= std_logic_vector(unsigned(i4_reg_222) + unsigned(ap_const_lv2_1));
    i_2_fu_450_p2 <= std_logic_vector(unsigned(i6_reg_245) + unsigned(ap_const_lv2_1));
    i_3_fu_506_p2 <= std_logic_vector(unsigned(i8_reg_269) + unsigned(ap_const_lv4_1));
    i_4_fu_593_p2 <= std_logic_vector(unsigned(i5_reg_317) + unsigned(ap_const_lv8_1));
    i_fu_345_p2 <= std_logic_vector(unsigned(i3_reg_199) + unsigned(ap_const_lv9_1));
    j4_cast2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_328),14));
    j_1_fu_369_p2 <= std_logic_vector(unsigned(j_reg_211) + unsigned(ap_const_lv8_1));
    j_2_fu_423_p2 <= std_logic_vector(unsigned(j5_reg_234) + unsigned(ap_const_lv2_1));
    j_3_fu_462_p2 <= std_logic_vector(unsigned(j7_reg_257) + unsigned(ap_const_lv2_1));
    j_4_fu_633_p2 <= std_logic_vector(unsigned(j4_reg_328) + unsigned(ap_const_lv8_1));
    j_5_fu_518_p2 <= std_logic_vector(unsigned(j9_reg_281) + unsigned(ap_const_lv4_1));
    k_1_fu_545_p2 <= std_logic_vector(unsigned(k_reg_293) + unsigned(ap_const_lv4_1));
    tmp_10_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_485_p4),64));
    tmp_11_fu_599_p3 <= (i5_reg_317 & ap_const_lv7_0);
    tmp_12_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_328),16));
    tmp_12_fu_611_p1 <= i5_reg_317(7 - 1 downto 0);
    tmp_13_fu_524_p4 <= ((i8_reg_269 & ap_const_lv3_0) & j9_reg_281);
    tmp_14_fu_653_p2 <= std_logic_vector(unsigned(j4_cast2_fu_623_p1) + unsigned(tmp_s_reg_820));
    tmp_15_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_838),64));
    tmp_17_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_524_p4),64));
    tmp_18_fu_643_p2 <= std_logic_vector(unsigned(tmp_19_cast1_reg_815) + unsigned(tmp_12_cast_fu_639_p1));
    tmp_19_cast1_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_599_p3),16));
    tmp_19_fu_551_p4 <= ((i8_reg_269 & ap_const_lv3_0) & k_reg_293);
    tmp_1_fu_351_p3 <= (i3_reg_199 & ap_const_lv7_0);
    tmp_20_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_551_p4),64));
    tmp_21_fu_566_p4 <= ((k_reg_293 & ap_const_lv3_0) & j9_reg_281);
    tmp_22_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_566_p4),64));
    tmp_23_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_643_p2),64));
    tmp_2_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_351_p3),17));
    tmp_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_468_p5),64));
    tmp_3_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_701),64));
    tmp_3_fu_396_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_392_p1) + unsigned(tmp_2_cast_reg_683));
    tmp_4_fu_379_p3 <= (tmp_fu_375_p1 & j_reg_211);
    tmp_5_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_379_p3),64));
    tmp_6_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_211),17));
    tmp_6_fu_485_p4 <= ((i6_reg_245 & ap_const_lv5_0) & j7_reg_257);
    tmp_7_fu_429_p4 <= ((i4_reg_222 & ap_const_lv5_0) & j5_reg_234);
    tmp_8_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_429_p4),64));
    tmp_9_fu_468_p5 <= (((ap_const_lv6_20 & i6_reg_245) & ap_const_lv5_0) & j7_reg_257);
    tmp_fu_375_p1 <= i3_reg_199(8 - 1 downto 0);
    tmp_s_fu_615_p3 <= (tmp_12_fu_611_p1 & ap_const_lv7_0);
end behav;
